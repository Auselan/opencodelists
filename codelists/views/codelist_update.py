from django.contrib.auth.decorators import login_required
from django.core.exceptions import NON_FIELD_ERRORS
from django.db import transaction
from django.db.utils import IntegrityError
from django.shortcuts import redirect
from django.template.response import TemplateResponse

from .. import actions
from ..forms import CodelistUpdateForm, ReferenceFormSet, SignOffFormSet
from .decorators import load_codelist, require_permission

template_name = "codelists/codelist.html"


@login_required
@load_codelist
@require_permission
def codelist_update(request, codelist):
    if request.method == "POST":
        return handle_post(request, codelist)
    return handle_get(request, codelist)


def handle_get(request, codelist):
    codelist_form = CodelistUpdateForm(
        {
            "name": codelist.name,
            "organisation": codelist.organisation,
            "coding_system_id": codelist.coding_system_id,
            "description": codelist.description,
            "methodology": codelist.methodology,
        }
    )

    reference_formset = ReferenceFormSet(
        queryset=codelist.references.all(), prefix="reference"
    )
    signoff_formset = SignOffFormSet(queryset=codelist.signoffs.all(), prefix="signoff")

    ctx = {
        "codelist_form": codelist_form,
        "reference_formset": reference_formset,
        "signoff_formset": signoff_formset,
    }
    return TemplateResponse(request, template_name, ctx)


def handle_post(request, codelist):
    codelist_form = CodelistUpdateForm(request.POST, request.FILES)
    reference_formset = ReferenceFormSet(
        request.POST, queryset=codelist.references.all(), prefix="reference"
    )
    signoff_formset = SignOffFormSet(
        request.POST, queryset=codelist.signoffs.all(), prefix="signoff"
    )

    if (
        codelist_form.is_valid()
        and reference_formset.is_valid()
        and signoff_formset.is_valid()
    ):
        return handle_valid(
            request, codelist, codelist_form, reference_formset, signoff_formset
        )
    else:
        return handle_invalid(
            request, codelist_form, reference_formset, signoff_formset
        )


@transaction.atomic
def handle_valid(request, codelist, codelist_form, reference_formset, signoff_formset):
    save_formset(reference_formset, codelist)
    save_formset(signoff_formset, codelist)

    name = codelist_form.cleaned_data["name"]

    try:
        codelist = actions.update_codelist(
            codelist=codelist,
            organisation=codelist_form.cleaned_data["organisation"],
            name=codelist_form.cleaned_data["name"],
            coding_system_id=codelist_form.cleaned_data["coding_system_id"],
            description=codelist_form.cleaned_data["description"],
            methodology=codelist_form.cleaned_data["methodology"],
        )
    except IntegrityError as e:
        assert "UNIQUE constraint failed" in str(e)
        codelist_form.add_error(
            NON_FIELD_ERRORS,
            f"There is already a codelist in this organisation called {name}",
        )
        return handle_invalid(
            request, codelist_form, reference_formset, signoff_formset
        )

    return redirect(codelist)


def handle_invalid(request, codelist_form, reference_formset, signoff_formset):
    ctx = {
        "codelist_form": codelist_form,
        "reference_formset": reference_formset,
        "signoff_formset": signoff_formset,
    }
    return TemplateResponse(request, template_name, ctx)


def save_formset(formset, codelist):
    """
    Save the the given FormSet

    Both our Reference and SignOff FormSets contain forms which are linked
    to a particular Codelist.  We need to set that Codelist on the
    instances generated by the FormSet on `.save()`.
    """
    for instance in formset.save(commit=False):
        instance.codelist = codelist
        instance.save()

    # manually delete the deleted objects since we used .save(commit=False)
    # earlier, as per the docs:
    # https://docs.djangoorganisation.com/en/3.0/topics/forms/formsets/#can-delete
    for obj in formset.deleted_objects:
        obj.delete()
