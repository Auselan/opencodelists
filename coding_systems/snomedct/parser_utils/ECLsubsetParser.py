# Generated from ECLsubset.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        99,
        348,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        76,
        8,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        3,
        1,
        82,
        8,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        4,
        2,
        90,
        8,
        2,
        11,
        2,
        12,
        2,
        91,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        103,
        8,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        112,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        126,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        162,
        8,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        252,
        8,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        5,
        18,
        259,
        8,
        18,
        10,
        18,
        12,
        18,
        262,
        9,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        4,
        19,
        269,
        8,
        19,
        11,
        19,
        12,
        19,
        270,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        5,
        20,
        278,
        8,
        20,
        10,
        20,
        12,
        20,
        281,
        9,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        293,
        8,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        305,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        28,
        1,
        28,
        1,
        29,
        1,
        29,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        328,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        338,
        8,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        346,
        8,
        35,
        1,
        35,
        0,
        0,
        36,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        0,
        18,
        2,
        0,
        52,
        52,
        84,
        84,
        2,
        0,
        55,
        55,
        87,
        87,
        2,
        0,
        50,
        50,
        82,
        82,
        2,
        0,
        46,
        46,
        78,
        78,
        2,
        0,
        51,
        51,
        83,
        83,
        2,
        0,
        58,
        58,
        90,
        90,
        2,
        0,
        56,
        56,
        88,
        88,
        1,
        0,
        6,
        14,
        1,
        0,
        16,
        99,
        1,
        0,
        6,
        19,
        1,
        0,
        21,
        99,
        1,
        0,
        21,
        30,
        1,
        0,
        22,
        30,
        1,
        0,
        6,
        96,
        1,
        0,
        98,
        99,
        1,
        0,
        5,
        6,
        1,
        0,
        8,
        64,
        1,
        0,
        66,
        99,
        367,
        0,
        72,
        1,
        0,
        0,
        0,
        2,
        81,
        1,
        0,
        0,
        0,
        4,
        83,
        1,
        0,
        0,
        0,
        6,
        93,
        1,
        0,
        0,
        0,
        8,
        102,
        1,
        0,
        0,
        0,
        10,
        113,
        1,
        0,
        0,
        0,
        12,
        115,
        1,
        0,
        0,
        0,
        14,
        117,
        1,
        0,
        0,
        0,
        16,
        125,
        1,
        0,
        0,
        0,
        18,
        127,
        1,
        0,
        0,
        0,
        20,
        129,
        1,
        0,
        0,
        0,
        22,
        132,
        1,
        0,
        0,
        0,
        24,
        135,
        1,
        0,
        0,
        0,
        26,
        137,
        1,
        0,
        0,
        0,
        28,
        140,
        1,
        0,
        0,
        0,
        30,
        143,
        1,
        0,
        0,
        0,
        32,
        147,
        1,
        0,
        0,
        0,
        34,
        154,
        1,
        0,
        0,
        0,
        36,
        260,
        1,
        0,
        0,
        0,
        38,
        268,
        1,
        0,
        0,
        0,
        40,
        272,
        1,
        0,
        0,
        0,
        42,
        292,
        1,
        0,
        0,
        0,
        44,
        294,
        1,
        0,
        0,
        0,
        46,
        304,
        1,
        0,
        0,
        0,
        48,
        306,
        1,
        0,
        0,
        0,
        50,
        308,
        1,
        0,
        0,
        0,
        52,
        310,
        1,
        0,
        0,
        0,
        54,
        312,
        1,
        0,
        0,
        0,
        56,
        314,
        1,
        0,
        0,
        0,
        58,
        316,
        1,
        0,
        0,
        0,
        60,
        318,
        1,
        0,
        0,
        0,
        62,
        320,
        1,
        0,
        0,
        0,
        64,
        322,
        1,
        0,
        0,
        0,
        66,
        327,
        1,
        0,
        0,
        0,
        68,
        337,
        1,
        0,
        0,
        0,
        70,
        345,
        1,
        0,
        0,
        0,
        72,
        75,
        3,
        36,
        18,
        0,
        73,
        76,
        3,
        2,
        1,
        0,
        74,
        76,
        3,
        8,
        4,
        0,
        75,
        73,
        1,
        0,
        0,
        0,
        75,
        74,
        1,
        0,
        0,
        0,
        76,
        77,
        1,
        0,
        0,
        0,
        77,
        78,
        3,
        36,
        18,
        0,
        78,
        1,
        1,
        0,
        0,
        0,
        79,
        82,
        3,
        4,
        2,
        0,
        80,
        82,
        3,
        6,
        3,
        0,
        81,
        79,
        1,
        0,
        0,
        0,
        81,
        80,
        1,
        0,
        0,
        0,
        82,
        3,
        1,
        0,
        0,
        0,
        83,
        89,
        3,
        8,
        4,
        0,
        84,
        85,
        3,
        36,
        18,
        0,
        85,
        86,
        3,
        30,
        15,
        0,
        86,
        87,
        3,
        36,
        18,
        0,
        87,
        88,
        3,
        8,
        4,
        0,
        88,
        90,
        1,
        0,
        0,
        0,
        89,
        84,
        1,
        0,
        0,
        0,
        90,
        91,
        1,
        0,
        0,
        0,
        91,
        89,
        1,
        0,
        0,
        0,
        91,
        92,
        1,
        0,
        0,
        0,
        92,
        5,
        1,
        0,
        0,
        0,
        93,
        94,
        3,
        8,
        4,
        0,
        94,
        95,
        3,
        36,
        18,
        0,
        95,
        96,
        3,
        32,
        16,
        0,
        96,
        97,
        3,
        36,
        18,
        0,
        97,
        98,
        3,
        8,
        4,
        0,
        98,
        7,
        1,
        0,
        0,
        0,
        99,
        100,
        3,
        16,
        8,
        0,
        100,
        101,
        3,
        36,
        18,
        0,
        101,
        103,
        1,
        0,
        0,
        0,
        102,
        99,
        1,
        0,
        0,
        0,
        102,
        103,
        1,
        0,
        0,
        0,
        103,
        111,
        1,
        0,
        0,
        0,
        104,
        112,
        3,
        10,
        5,
        0,
        105,
        106,
        5,
        13,
        0,
        0,
        106,
        107,
        3,
        36,
        18,
        0,
        107,
        108,
        3,
        0,
        0,
        0,
        108,
        109,
        3,
        36,
        18,
        0,
        109,
        110,
        5,
        14,
        0,
        0,
        110,
        112,
        1,
        0,
        0,
        0,
        111,
        104,
        1,
        0,
        0,
        0,
        111,
        105,
        1,
        0,
        0,
        0,
        112,
        9,
        1,
        0,
        0,
        0,
        113,
        114,
        3,
        12,
        6,
        0,
        114,
        11,
        1,
        0,
        0,
        0,
        115,
        116,
        3,
        14,
        7,
        0,
        116,
        13,
        1,
        0,
        0,
        0,
        117,
        118,
        3,
        34,
        17,
        0,
        118,
        15,
        1,
        0,
        0,
        0,
        119,
        126,
        3,
        22,
        11,
        0,
        120,
        126,
        3,
        20,
        10,
        0,
        121,
        126,
        3,
        18,
        9,
        0,
        122,
        126,
        3,
        28,
        14,
        0,
        123,
        126,
        3,
        26,
        13,
        0,
        124,
        126,
        3,
        24,
        12,
        0,
        125,
        119,
        1,
        0,
        0,
        0,
        125,
        120,
        1,
        0,
        0,
        0,
        125,
        121,
        1,
        0,
        0,
        0,
        125,
        122,
        1,
        0,
        0,
        0,
        125,
        123,
        1,
        0,
        0,
        0,
        125,
        124,
        1,
        0,
        0,
        0,
        126,
        17,
        1,
        0,
        0,
        0,
        127,
        128,
        5,
        33,
        0,
        0,
        128,
        19,
        1,
        0,
        0,
        0,
        129,
        130,
        5,
        33,
        0,
        0,
        130,
        131,
        5,
        33,
        0,
        0,
        131,
        21,
        1,
        0,
        0,
        0,
        132,
        133,
        5,
        33,
        0,
        0,
        133,
        134,
        5,
        6,
        0,
        0,
        134,
        23,
        1,
        0,
        0,
        0,
        135,
        136,
        5,
        35,
        0,
        0,
        136,
        25,
        1,
        0,
        0,
        0,
        137,
        138,
        5,
        35,
        0,
        0,
        138,
        139,
        5,
        35,
        0,
        0,
        139,
        27,
        1,
        0,
        0,
        0,
        140,
        141,
        5,
        35,
        0,
        0,
        141,
        142,
        5,
        6,
        0,
        0,
        142,
        29,
        1,
        0,
        0,
        0,
        143,
        144,
        7,
        0,
        0,
        0,
        144,
        145,
        7,
        1,
        0,
        0,
        145,
        146,
        3,
        38,
        19,
        0,
        146,
        31,
        1,
        0,
        0,
        0,
        147,
        148,
        7,
        2,
        0,
        0,
        148,
        149,
        7,
        3,
        0,
        0,
        149,
        150,
        7,
        4,
        0,
        0,
        150,
        151,
        7,
        5,
        0,
        0,
        151,
        152,
        7,
        6,
        0,
        0,
        152,
        153,
        3,
        38,
        19,
        0,
        153,
        33,
        1,
        0,
        0,
        0,
        154,
        155,
        3,
        64,
        32,
        0,
        155,
        156,
        3,
        60,
        30,
        0,
        156,
        157,
        3,
        60,
        30,
        0,
        157,
        158,
        3,
        60,
        30,
        0,
        158,
        159,
        3,
        60,
        30,
        0,
        159,
        251,
        3,
        60,
        30,
        0,
        160,
        162,
        3,
        60,
        30,
        0,
        161,
        160,
        1,
        0,
        0,
        0,
        161,
        162,
        1,
        0,
        0,
        0,
        162,
        252,
        1,
        0,
        0,
        0,
        163,
        164,
        3,
        60,
        30,
        0,
        164,
        165,
        3,
        60,
        30,
        0,
        165,
        252,
        1,
        0,
        0,
        0,
        166,
        167,
        3,
        60,
        30,
        0,
        167,
        168,
        3,
        60,
        30,
        0,
        168,
        169,
        3,
        60,
        30,
        0,
        169,
        252,
        1,
        0,
        0,
        0,
        170,
        171,
        3,
        60,
        30,
        0,
        171,
        172,
        3,
        60,
        30,
        0,
        172,
        173,
        3,
        60,
        30,
        0,
        173,
        174,
        3,
        60,
        30,
        0,
        174,
        252,
        1,
        0,
        0,
        0,
        175,
        176,
        3,
        60,
        30,
        0,
        176,
        177,
        3,
        60,
        30,
        0,
        177,
        178,
        3,
        60,
        30,
        0,
        178,
        179,
        3,
        60,
        30,
        0,
        179,
        180,
        3,
        60,
        30,
        0,
        180,
        252,
        1,
        0,
        0,
        0,
        181,
        182,
        3,
        60,
        30,
        0,
        182,
        183,
        3,
        60,
        30,
        0,
        183,
        184,
        3,
        60,
        30,
        0,
        184,
        185,
        3,
        60,
        30,
        0,
        185,
        186,
        3,
        60,
        30,
        0,
        186,
        187,
        3,
        60,
        30,
        0,
        187,
        252,
        1,
        0,
        0,
        0,
        188,
        189,
        3,
        60,
        30,
        0,
        189,
        190,
        3,
        60,
        30,
        0,
        190,
        191,
        3,
        60,
        30,
        0,
        191,
        192,
        3,
        60,
        30,
        0,
        192,
        193,
        3,
        60,
        30,
        0,
        193,
        194,
        3,
        60,
        30,
        0,
        194,
        195,
        3,
        60,
        30,
        0,
        195,
        252,
        1,
        0,
        0,
        0,
        196,
        197,
        3,
        60,
        30,
        0,
        197,
        198,
        3,
        60,
        30,
        0,
        198,
        199,
        3,
        60,
        30,
        0,
        199,
        200,
        3,
        60,
        30,
        0,
        200,
        201,
        3,
        60,
        30,
        0,
        201,
        202,
        3,
        60,
        30,
        0,
        202,
        203,
        3,
        60,
        30,
        0,
        203,
        204,
        3,
        60,
        30,
        0,
        204,
        252,
        1,
        0,
        0,
        0,
        205,
        206,
        3,
        60,
        30,
        0,
        206,
        207,
        3,
        60,
        30,
        0,
        207,
        208,
        3,
        60,
        30,
        0,
        208,
        209,
        3,
        60,
        30,
        0,
        209,
        210,
        3,
        60,
        30,
        0,
        210,
        211,
        3,
        60,
        30,
        0,
        211,
        212,
        3,
        60,
        30,
        0,
        212,
        213,
        3,
        60,
        30,
        0,
        213,
        214,
        3,
        60,
        30,
        0,
        214,
        252,
        1,
        0,
        0,
        0,
        215,
        216,
        3,
        60,
        30,
        0,
        216,
        217,
        3,
        60,
        30,
        0,
        217,
        218,
        3,
        60,
        30,
        0,
        218,
        219,
        3,
        60,
        30,
        0,
        219,
        220,
        3,
        60,
        30,
        0,
        220,
        221,
        3,
        60,
        30,
        0,
        221,
        222,
        3,
        60,
        30,
        0,
        222,
        223,
        3,
        60,
        30,
        0,
        223,
        224,
        3,
        60,
        30,
        0,
        224,
        225,
        3,
        60,
        30,
        0,
        225,
        252,
        1,
        0,
        0,
        0,
        226,
        227,
        3,
        60,
        30,
        0,
        227,
        228,
        3,
        60,
        30,
        0,
        228,
        229,
        3,
        60,
        30,
        0,
        229,
        230,
        3,
        60,
        30,
        0,
        230,
        231,
        3,
        60,
        30,
        0,
        231,
        232,
        3,
        60,
        30,
        0,
        232,
        233,
        3,
        60,
        30,
        0,
        233,
        234,
        3,
        60,
        30,
        0,
        234,
        235,
        3,
        60,
        30,
        0,
        235,
        236,
        3,
        60,
        30,
        0,
        236,
        237,
        3,
        60,
        30,
        0,
        237,
        252,
        1,
        0,
        0,
        0,
        238,
        239,
        3,
        60,
        30,
        0,
        239,
        240,
        3,
        60,
        30,
        0,
        240,
        241,
        3,
        60,
        30,
        0,
        241,
        242,
        3,
        60,
        30,
        0,
        242,
        243,
        3,
        60,
        30,
        0,
        243,
        244,
        3,
        60,
        30,
        0,
        244,
        245,
        3,
        60,
        30,
        0,
        245,
        246,
        3,
        60,
        30,
        0,
        246,
        247,
        3,
        60,
        30,
        0,
        247,
        248,
        3,
        60,
        30,
        0,
        248,
        249,
        3,
        60,
        30,
        0,
        249,
        250,
        3,
        60,
        30,
        0,
        250,
        252,
        1,
        0,
        0,
        0,
        251,
        161,
        1,
        0,
        0,
        0,
        251,
        163,
        1,
        0,
        0,
        0,
        251,
        166,
        1,
        0,
        0,
        0,
        251,
        170,
        1,
        0,
        0,
        0,
        251,
        175,
        1,
        0,
        0,
        0,
        251,
        181,
        1,
        0,
        0,
        0,
        251,
        188,
        1,
        0,
        0,
        0,
        251,
        196,
        1,
        0,
        0,
        0,
        251,
        205,
        1,
        0,
        0,
        0,
        251,
        215,
        1,
        0,
        0,
        0,
        251,
        226,
        1,
        0,
        0,
        0,
        251,
        238,
        1,
        0,
        0,
        0,
        252,
        35,
        1,
        0,
        0,
        0,
        253,
        259,
        3,
        48,
        24,
        0,
        254,
        259,
        3,
        50,
        25,
        0,
        255,
        259,
        3,
        52,
        26,
        0,
        256,
        259,
        3,
        54,
        27,
        0,
        257,
        259,
        3,
        40,
        20,
        0,
        258,
        253,
        1,
        0,
        0,
        0,
        258,
        254,
        1,
        0,
        0,
        0,
        258,
        255,
        1,
        0,
        0,
        0,
        258,
        256,
        1,
        0,
        0,
        0,
        258,
        257,
        1,
        0,
        0,
        0,
        259,
        262,
        1,
        0,
        0,
        0,
        260,
        258,
        1,
        0,
        0,
        0,
        260,
        261,
        1,
        0,
        0,
        0,
        261,
        37,
        1,
        0,
        0,
        0,
        262,
        260,
        1,
        0,
        0,
        0,
        263,
        269,
        3,
        48,
        24,
        0,
        264,
        269,
        3,
        50,
        25,
        0,
        265,
        269,
        3,
        52,
        26,
        0,
        266,
        269,
        3,
        54,
        27,
        0,
        267,
        269,
        3,
        40,
        20,
        0,
        268,
        263,
        1,
        0,
        0,
        0,
        268,
        264,
        1,
        0,
        0,
        0,
        268,
        265,
        1,
        0,
        0,
        0,
        268,
        266,
        1,
        0,
        0,
        0,
        268,
        267,
        1,
        0,
        0,
        0,
        269,
        270,
        1,
        0,
        0,
        0,
        270,
        268,
        1,
        0,
        0,
        0,
        270,
        271,
        1,
        0,
        0,
        0,
        271,
        39,
        1,
        0,
        0,
        0,
        272,
        273,
        5,
        20,
        0,
        0,
        273,
        274,
        5,
        15,
        0,
        0,
        274,
        279,
        1,
        0,
        0,
        0,
        275,
        278,
        3,
        42,
        21,
        0,
        276,
        278,
        3,
        44,
        22,
        0,
        277,
        275,
        1,
        0,
        0,
        0,
        277,
        276,
        1,
        0,
        0,
        0,
        278,
        281,
        1,
        0,
        0,
        0,
        279,
        277,
        1,
        0,
        0,
        0,
        279,
        280,
        1,
        0,
        0,
        0,
        280,
        282,
        1,
        0,
        0,
        0,
        281,
        279,
        1,
        0,
        0,
        0,
        282,
        283,
        5,
        15,
        0,
        0,
        283,
        284,
        5,
        20,
        0,
        0,
        284,
        41,
        1,
        0,
        0,
        0,
        285,
        293,
        3,
        48,
        24,
        0,
        286,
        293,
        3,
        50,
        25,
        0,
        287,
        293,
        3,
        52,
        26,
        0,
        288,
        293,
        3,
        54,
        27,
        0,
        289,
        293,
        7,
        7,
        0,
        0,
        290,
        293,
        7,
        8,
        0,
        0,
        291,
        293,
        5,
        1,
        0,
        0,
        292,
        285,
        1,
        0,
        0,
        0,
        292,
        286,
        1,
        0,
        0,
        0,
        292,
        287,
        1,
        0,
        0,
        0,
        292,
        288,
        1,
        0,
        0,
        0,
        292,
        289,
        1,
        0,
        0,
        0,
        292,
        290,
        1,
        0,
        0,
        0,
        292,
        291,
        1,
        0,
        0,
        0,
        293,
        43,
        1,
        0,
        0,
        0,
        294,
        295,
        5,
        15,
        0,
        0,
        295,
        296,
        3,
        46,
        23,
        0,
        296,
        45,
        1,
        0,
        0,
        0,
        297,
        305,
        3,
        48,
        24,
        0,
        298,
        305,
        3,
        50,
        25,
        0,
        299,
        305,
        3,
        52,
        26,
        0,
        300,
        305,
        3,
        54,
        27,
        0,
        301,
        305,
        7,
        9,
        0,
        0,
        302,
        305,
        7,
        10,
        0,
        0,
        303,
        305,
        5,
        1,
        0,
        0,
        304,
        297,
        1,
        0,
        0,
        0,
        304,
        298,
        1,
        0,
        0,
        0,
        304,
        299,
        1,
        0,
        0,
        0,
        304,
        300,
        1,
        0,
        0,
        0,
        304,
        301,
        1,
        0,
        0,
        0,
        304,
        302,
        1,
        0,
        0,
        0,
        304,
        303,
        1,
        0,
        0,
        0,
        305,
        47,
        1,
        0,
        0,
        0,
        306,
        307,
        5,
        5,
        0,
        0,
        307,
        49,
        1,
        0,
        0,
        0,
        308,
        309,
        5,
        2,
        0,
        0,
        309,
        51,
        1,
        0,
        0,
        0,
        310,
        311,
        5,
        4,
        0,
        0,
        311,
        53,
        1,
        0,
        0,
        0,
        312,
        313,
        5,
        3,
        0,
        0,
        313,
        55,
        1,
        0,
        0,
        0,
        314,
        315,
        5,
        7,
        0,
        0,
        315,
        57,
        1,
        0,
        0,
        0,
        316,
        317,
        5,
        65,
        0,
        0,
        317,
        59,
        1,
        0,
        0,
        0,
        318,
        319,
        7,
        11,
        0,
        0,
        319,
        61,
        1,
        0,
        0,
        0,
        320,
        321,
        5,
        21,
        0,
        0,
        321,
        63,
        1,
        0,
        0,
        0,
        322,
        323,
        7,
        12,
        0,
        0,
        323,
        65,
        1,
        0,
        0,
        0,
        324,
        328,
        7,
        13,
        0,
        0,
        325,
        328,
        7,
        14,
        0,
        0,
        326,
        328,
        5,
        1,
        0,
        0,
        327,
        324,
        1,
        0,
        0,
        0,
        327,
        325,
        1,
        0,
        0,
        0,
        327,
        326,
        1,
        0,
        0,
        0,
        328,
        67,
        1,
        0,
        0,
        0,
        329,
        338,
        3,
        48,
        24,
        0,
        330,
        338,
        3,
        50,
        25,
        0,
        331,
        338,
        3,
        52,
        26,
        0,
        332,
        338,
        3,
        54,
        27,
        0,
        333,
        338,
        7,
        15,
        0,
        0,
        334,
        338,
        7,
        16,
        0,
        0,
        335,
        338,
        7,
        17,
        0,
        0,
        336,
        338,
        5,
        1,
        0,
        0,
        337,
        329,
        1,
        0,
        0,
        0,
        337,
        330,
        1,
        0,
        0,
        0,
        337,
        331,
        1,
        0,
        0,
        0,
        337,
        332,
        1,
        0,
        0,
        0,
        337,
        333,
        1,
        0,
        0,
        0,
        337,
        334,
        1,
        0,
        0,
        0,
        337,
        335,
        1,
        0,
        0,
        0,
        337,
        336,
        1,
        0,
        0,
        0,
        338,
        69,
        1,
        0,
        0,
        0,
        339,
        340,
        3,
        58,
        29,
        0,
        340,
        341,
        3,
        56,
        28,
        0,
        341,
        346,
        1,
        0,
        0,
        0,
        342,
        343,
        3,
        58,
        29,
        0,
        343,
        344,
        3,
        58,
        29,
        0,
        344,
        346,
        1,
        0,
        0,
        0,
        345,
        339,
        1,
        0,
        0,
        0,
        345,
        342,
        1,
        0,
        0,
        0,
        346,
        71,
        1,
        0,
        0,
        0,
        19,
        75,
        81,
        91,
        102,
        111,
        125,
        161,
        251,
        258,
        260,
        268,
        270,
        277,
        279,
        292,
        304,
        327,
        337,
        345,
    ]


class ECLsubsetParser(Parser):

    grammarFileName = "ECLsubset.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "'\\u0009'",
        "'\\u000A'",
        "'\\u000D'",
        "' '",
        "'!'",
        "'\"'",
        "'#'",
        "'$'",
        "'%'",
        "'&'",
        "'''",
        "'('",
        "')'",
        "'*'",
        "'+'",
        "','",
        "'-'",
        "'.'",
        "'/'",
        "'0'",
        "'1'",
        "'2'",
        "'3'",
        "'4'",
        "'5'",
        "'6'",
        "'7'",
        "'8'",
        "'9'",
        "':'",
        "';'",
        "'<'",
        "'='",
        "'>'",
        "'?'",
        "'@'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'F'",
        "'G'",
        "'H'",
        "'I'",
        "'J'",
        "'K'",
        "'L'",
        "'M'",
        "'N'",
        "'O'",
        "'P'",
        "'Q'",
        "'R'",
        "'S'",
        "'T'",
        "'U'",
        "'V'",
        "'W'",
        "'X'",
        "'Y'",
        "'Z'",
        "'['",
        "'\\'",
        "']'",
        "'^'",
        "'_'",
        "'`'",
        "'a'",
        "'b'",
        "'c'",
        "'d'",
        "'e'",
        "'f'",
        "'g'",
        "'h'",
        "'i'",
        "'j'",
        "'k'",
        "'l'",
        "'m'",
        "'n'",
        "'o'",
        "'p'",
        "'q'",
        "'r'",
        "'s'",
        "'t'",
        "'u'",
        "'v'",
        "'w'",
        "'x'",
        "'y'",
        "'z'",
        "'{'",
        "'|'",
        "'}'",
        "'~'",
    ]

    symbolicNames = [
        "<INVALID>",
        "UTF8_LETTER",
        "TAB",
        "LF",
        "CR",
        "SPACE",
        "EXCLAMATION",
        "QUOTE",
        "POUND",
        "DOLLAR",
        "PERCENT",
        "AMPERSAND",
        "APOSTROPHE",
        "LEFT_PAREN",
        "RIGHT_PAREN",
        "ASTERISK",
        "PLUS",
        "COMMA",
        "DASH",
        "PERIOD",
        "SLASH",
        "ZERO",
        "ONE",
        "TWO",
        "THREE",
        "FOUR",
        "FIVE",
        "SIX",
        "SEVEN",
        "EIGHT",
        "NINE",
        "COLON",
        "SEMICOLON",
        "LESS_THAN",
        "EQUALS",
        "GREATER_THAN",
        "QUESTION",
        "AT",
        "CAP_A",
        "CAP_B",
        "CAP_C",
        "CAP_D",
        "CAP_E",
        "CAP_F",
        "CAP_G",
        "CAP_H",
        "CAP_I",
        "CAP_J",
        "CAP_K",
        "CAP_L",
        "CAP_M",
        "CAP_N",
        "CAP_O",
        "CAP_P",
        "CAP_Q",
        "CAP_R",
        "CAP_S",
        "CAP_T",
        "CAP_U",
        "CAP_V",
        "CAP_W",
        "CAP_X",
        "CAP_Y",
        "CAP_Z",
        "LEFT_BRACE",
        "BACKSLASH",
        "RIGHT_BRACE",
        "CARAT",
        "UNDERSCORE",
        "ACCENT",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "LEFT_CURLY_BRACE",
        "PIPE",
        "RIGHT_CURLY_BRACE",
        "TILDE",
    ]

    RULE_expressionconstraint = 0
    RULE_compoundexpressionconstraint = 1
    RULE_disjunctionexpressionconstraint = 2
    RULE_exclusionexpressionconstraint = 3
    RULE_subexpressionconstraint = 4
    RULE_eclfocusconcept = 5
    RULE_eclconceptreference = 6
    RULE_conceptid = 7
    RULE_constraintoperator = 8
    RULE_descendantof = 9
    RULE_descendantorselfof = 10
    RULE_childof = 11
    RULE_ancestorof = 12
    RULE_ancestororselfof = 13
    RULE_parentof = 14
    RULE_disjunction = 15
    RULE_exclusion = 16
    RULE_sctid = 17
    RULE_ws = 18
    RULE_mws = 19
    RULE_comment = 20
    RULE_nonstarchar = 21
    RULE_starwithnonfslash = 22
    RULE_nonfslash = 23
    RULE_sp = 24
    RULE_htab = 25
    RULE_cr = 26
    RULE_lf = 27
    RULE_qm = 28
    RULE_bs = 29
    RULE_digit = 30
    RULE_zero = 31
    RULE_digitnonzero = 32
    RULE_nonwsnonpipe = 33
    RULE_anynonescapedchar = 34
    RULE_escapedchar = 35

    ruleNames = [
        "expressionconstraint",
        "compoundexpressionconstraint",
        "disjunctionexpressionconstraint",
        "exclusionexpressionconstraint",
        "subexpressionconstraint",
        "eclfocusconcept",
        "eclconceptreference",
        "conceptid",
        "constraintoperator",
        "descendantof",
        "descendantorselfof",
        "childof",
        "ancestorof",
        "ancestororselfof",
        "parentof",
        "disjunction",
        "exclusion",
        "sctid",
        "ws",
        "mws",
        "comment",
        "nonstarchar",
        "starwithnonfslash",
        "nonfslash",
        "sp",
        "htab",
        "cr",
        "lf",
        "qm",
        "bs",
        "digit",
        "zero",
        "digitnonzero",
        "nonwsnonpipe",
        "anynonescapedchar",
        "escapedchar",
    ]

    EOF = Token.EOF
    UTF8_LETTER = 1
    TAB = 2
    LF = 3
    CR = 4
    SPACE = 5
    EXCLAMATION = 6
    QUOTE = 7
    POUND = 8
    DOLLAR = 9
    PERCENT = 10
    AMPERSAND = 11
    APOSTROPHE = 12
    LEFT_PAREN = 13
    RIGHT_PAREN = 14
    ASTERISK = 15
    PLUS = 16
    COMMA = 17
    DASH = 18
    PERIOD = 19
    SLASH = 20
    ZERO = 21
    ONE = 22
    TWO = 23
    THREE = 24
    FOUR = 25
    FIVE = 26
    SIX = 27
    SEVEN = 28
    EIGHT = 29
    NINE = 30
    COLON = 31
    SEMICOLON = 32
    LESS_THAN = 33
    EQUALS = 34
    GREATER_THAN = 35
    QUESTION = 36
    AT = 37
    CAP_A = 38
    CAP_B = 39
    CAP_C = 40
    CAP_D = 41
    CAP_E = 42
    CAP_F = 43
    CAP_G = 44
    CAP_H = 45
    CAP_I = 46
    CAP_J = 47
    CAP_K = 48
    CAP_L = 49
    CAP_M = 50
    CAP_N = 51
    CAP_O = 52
    CAP_P = 53
    CAP_Q = 54
    CAP_R = 55
    CAP_S = 56
    CAP_T = 57
    CAP_U = 58
    CAP_V = 59
    CAP_W = 60
    CAP_X = 61
    CAP_Y = 62
    CAP_Z = 63
    LEFT_BRACE = 64
    BACKSLASH = 65
    RIGHT_BRACE = 66
    CARAT = 67
    UNDERSCORE = 68
    ACCENT = 69
    A = 70
    B = 71
    C = 72
    D = 73
    E = 74
    F = 75
    G = 76
    H = 77
    I = 78
    J = 79
    K = 80
    L = 81
    M = 82
    N = 83
    O = 84
    P = 85
    Q = 86
    R = 87
    S = 88
    T = 89
    U = 90
    V = 91
    W = 92
    X = 93
    Y = 94
    Z = 95
    LEFT_CURLY_BRACE = 96
    PIPE = 97
    RIGHT_CURLY_BRACE = 98
    TILDE = 99

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class ExpressionconstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ws(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.WsContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.WsContext, i)

        def compoundexpressionconstraint(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.CompoundexpressionconstraintContext, 0
            )

        def subexpressionconstraint(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.SubexpressionconstraintContext, 0
            )

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_expressionconstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionconstraint"):
                return visitor.visitExpressionconstraint(self)
            else:
                return visitor.visitChildren(self)

    def expressionconstraint(self):

        localctx = ECLsubsetParser.ExpressionconstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 0, self.RULE_expressionconstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 72
            self.ws()
            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.state = 73
                self.compoundexpressionconstraint()
                pass

            elif la_ == 2:
                self.state = 74
                self.subexpressionconstraint()
                pass

            self.state = 77
            self.ws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundexpressionconstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunctionexpressionconstraint(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.DisjunctionexpressionconstraintContext, 0
            )

        def exclusionexpressionconstraint(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.ExclusionexpressionconstraintContext, 0
            )

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_compoundexpressionconstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompoundexpressionconstraint"):
                return visitor.visitCompoundexpressionconstraint(self)
            else:
                return visitor.visitChildren(self)

    def compoundexpressionconstraint(self):

        localctx = ECLsubsetParser.CompoundexpressionconstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 2, self.RULE_compoundexpressionconstraint)
        try:
            self.state = 81
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 1, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 79
                self.disjunctionexpressionconstraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 80
                self.exclusionexpressionconstraint()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionexpressionconstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subexpressionconstraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    ECLsubsetParser.SubexpressionconstraintContext
                )
            else:
                return self.getTypedRuleContext(
                    ECLsubsetParser.SubexpressionconstraintContext, i
                )

        def ws(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.WsContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.WsContext, i)

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.DisjunctionContext, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_disjunctionexpressionconstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunctionexpressionconstraint"):
                return visitor.visitDisjunctionexpressionconstraint(self)
            else:
                return visitor.visitChildren(self)

    def disjunctionexpressionconstraint(self):

        localctx = ECLsubsetParser.DisjunctionexpressionconstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 4, self.RULE_disjunctionexpressionconstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self.subexpressionconstraint()
            self.state = 89
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 84
                    self.ws()
                    self.state = 85
                    self.disjunction()
                    self.state = 86
                    self.ws()
                    self.state = 87
                    self.subexpressionconstraint()

                else:
                    raise NoViableAltException(self)
                self.state = 91
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionexpressionconstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subexpressionconstraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    ECLsubsetParser.SubexpressionconstraintContext
                )
            else:
                return self.getTypedRuleContext(
                    ECLsubsetParser.SubexpressionconstraintContext, i
                )

        def ws(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.WsContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.WsContext, i)

        def exclusion(self):
            return self.getTypedRuleContext(ECLsubsetParser.ExclusionContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_exclusionexpressionconstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExclusionexpressionconstraint"):
                return visitor.visitExclusionexpressionconstraint(self)
            else:
                return visitor.visitChildren(self)

    def exclusionexpressionconstraint(self):

        localctx = ECLsubsetParser.ExclusionexpressionconstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 6, self.RULE_exclusionexpressionconstraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self.subexpressionconstraint()
            self.state = 94
            self.ws()
            self.state = 95
            self.exclusion()
            self.state = 96
            self.ws()
            self.state = 97
            self.subexpressionconstraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubexpressionconstraintContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eclfocusconcept(self):
            return self.getTypedRuleContext(ECLsubsetParser.EclfocusconceptContext, 0)

        def constraintoperator(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.ConstraintoperatorContext, 0
            )

        def ws(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.WsContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.WsContext, i)

        def LEFT_PAREN(self):
            return self.getToken(ECLsubsetParser.LEFT_PAREN, 0)

        def expressionconstraint(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.ExpressionconstraintContext, 0
            )

        def RIGHT_PAREN(self):
            return self.getToken(ECLsubsetParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_subexpressionconstraint

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubexpressionconstraint"):
                return visitor.visitSubexpressionconstraint(self)
            else:
                return visitor.visitChildren(self)

    def subexpressionconstraint(self):

        localctx = ECLsubsetParser.SubexpressionconstraintContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 8, self.RULE_subexpressionconstraint)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == ECLsubsetParser.LESS_THAN or _la == ECLsubsetParser.GREATER_THAN:
                self.state = 99
                self.constraintoperator()
                self.state = 100
                self.ws()

            self.state = 111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                ECLsubsetParser.ONE,
                ECLsubsetParser.TWO,
                ECLsubsetParser.THREE,
                ECLsubsetParser.FOUR,
                ECLsubsetParser.FIVE,
                ECLsubsetParser.SIX,
                ECLsubsetParser.SEVEN,
                ECLsubsetParser.EIGHT,
                ECLsubsetParser.NINE,
            ]:
                self.state = 104
                self.eclfocusconcept()
                pass
            elif token in [ECLsubsetParser.LEFT_PAREN]:
                self.state = 105
                self.match(ECLsubsetParser.LEFT_PAREN)
                self.state = 106
                self.ws()
                self.state = 107
                self.expressionconstraint()
                self.state = 108
                self.ws()
                self.state = 109
                self.match(ECLsubsetParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EclfocusconceptContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eclconceptreference(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.EclconceptreferenceContext, 0
            )

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_eclfocusconcept

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEclfocusconcept"):
                return visitor.visitEclfocusconcept(self)
            else:
                return visitor.visitChildren(self)

    def eclfocusconcept(self):

        localctx = ECLsubsetParser.EclfocusconceptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_eclfocusconcept)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 113
            self.eclconceptreference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EclconceptreferenceContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conceptid(self):
            return self.getTypedRuleContext(ECLsubsetParser.ConceptidContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_eclconceptreference

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEclconceptreference"):
                return visitor.visitEclconceptreference(self)
            else:
                return visitor.visitChildren(self)

    def eclconceptreference(self):

        localctx = ECLsubsetParser.EclconceptreferenceContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 12, self.RULE_eclconceptreference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 115
            self.conceptid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConceptidContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sctid(self):
            return self.getTypedRuleContext(ECLsubsetParser.SctidContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_conceptid

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConceptid"):
                return visitor.visitConceptid(self)
            else:
                return visitor.visitChildren(self)

    def conceptid(self):

        localctx = ECLsubsetParser.ConceptidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_conceptid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 117
            self.sctid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintoperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def childof(self):
            return self.getTypedRuleContext(ECLsubsetParser.ChildofContext, 0)

        def descendantorselfof(self):
            return self.getTypedRuleContext(
                ECLsubsetParser.DescendantorselfofContext, 0
            )

        def descendantof(self):
            return self.getTypedRuleContext(ECLsubsetParser.DescendantofContext, 0)

        def parentof(self):
            return self.getTypedRuleContext(ECLsubsetParser.ParentofContext, 0)

        def ancestororselfof(self):
            return self.getTypedRuleContext(ECLsubsetParser.AncestororselfofContext, 0)

        def ancestorof(self):
            return self.getTypedRuleContext(ECLsubsetParser.AncestorofContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_constraintoperator

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraintoperator"):
                return visitor.visitConstraintoperator(self)
            else:
                return visitor.visitChildren(self)

    def constraintoperator(self):

        localctx = ECLsubsetParser.ConstraintoperatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 16, self.RULE_constraintoperator)
        try:
            self.state = 125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 119
                self.childof()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 120
                self.descendantorselfof()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 121
                self.descendantof()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 122
                self.parentof()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 123
                self.ancestororselfof()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 124
                self.ancestorof()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescendantofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_descendantof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDescendantof"):
                return visitor.visitDescendantof(self)
            else:
                return visitor.visitChildren(self)

    def descendantof(self):

        localctx = ECLsubsetParser.DescendantofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_descendantof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self.match(ECLsubsetParser.LESS_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescendantorselfofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(ECLsubsetParser.LESS_THAN)
            else:
                return self.getToken(ECLsubsetParser.LESS_THAN, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_descendantorselfof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDescendantorselfof"):
                return visitor.visitDescendantorselfof(self)
            else:
                return visitor.visitChildren(self)

    def descendantorselfof(self):

        localctx = ECLsubsetParser.DescendantorselfofContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 20, self.RULE_descendantorselfof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 129
            self.match(ECLsubsetParser.LESS_THAN)
            self.state = 130
            self.match(ECLsubsetParser.LESS_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChildofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_childof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitChildof"):
                return visitor.visitChildof(self)
            else:
                return visitor.visitChildren(self)

    def childof(self):

        localctx = ECLsubsetParser.ChildofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_childof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 132
            self.match(ECLsubsetParser.LESS_THAN)
            self.state = 133
            self.match(ECLsubsetParser.EXCLAMATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AncestorofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_ancestorof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAncestorof"):
                return visitor.visitAncestorof(self)
            else:
                return visitor.visitChildren(self)

    def ancestorof(self):

        localctx = ECLsubsetParser.AncestorofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_ancestorof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self.match(ECLsubsetParser.GREATER_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AncestororselfofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN(self, i: int = None):
            if i is None:
                return self.getTokens(ECLsubsetParser.GREATER_THAN)
            else:
                return self.getToken(ECLsubsetParser.GREATER_THAN, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_ancestororselfof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAncestororselfof"):
                return visitor.visitAncestororselfof(self)
            else:
                return visitor.visitChildren(self)

    def ancestororselfof(self):

        localctx = ECLsubsetParser.AncestororselfofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_ancestororselfof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self.match(ECLsubsetParser.GREATER_THAN)
            self.state = 138
            self.match(ECLsubsetParser.GREATER_THAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParentofContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_parentof

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParentof"):
                return visitor.visitParentof(self)
            else:
                return visitor.visitChildren(self)

    def parentof(self):

        localctx = ECLsubsetParser.ParentofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_parentof)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140
            self.match(ECLsubsetParser.GREATER_THAN)
            self.state = 141
            self.match(ECLsubsetParser.EXCLAMATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mws(self):
            return self.getTypedRuleContext(ECLsubsetParser.MwsContext, 0)

        def O(self):
            return self.getToken(ECLsubsetParser.O, 0)

        def CAP_O(self):
            return self.getToken(ECLsubsetParser.CAP_O, 0)

        def R(self):
            return self.getToken(ECLsubsetParser.R, 0)

        def CAP_R(self):
            return self.getToken(ECLsubsetParser.CAP_R, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_disjunction

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunction"):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)

    def disjunction(self):

        localctx = ECLsubsetParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_O or _la == ECLsubsetParser.O):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 144
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_R or _la == ECLsubsetParser.R):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 145
            self.mws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mws(self):
            return self.getTypedRuleContext(ECLsubsetParser.MwsContext, 0)

        def M(self):
            return self.getToken(ECLsubsetParser.M, 0)

        def CAP_M(self):
            return self.getToken(ECLsubsetParser.CAP_M, 0)

        def I(self):
            return self.getToken(ECLsubsetParser.I, 0)

        def CAP_I(self):
            return self.getToken(ECLsubsetParser.CAP_I, 0)

        def N(self):
            return self.getToken(ECLsubsetParser.N, 0)

        def CAP_N(self):
            return self.getToken(ECLsubsetParser.CAP_N, 0)

        def U(self):
            return self.getToken(ECLsubsetParser.U, 0)

        def CAP_U(self):
            return self.getToken(ECLsubsetParser.CAP_U, 0)

        def S(self):
            return self.getToken(ECLsubsetParser.S, 0)

        def CAP_S(self):
            return self.getToken(ECLsubsetParser.CAP_S, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_exclusion

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExclusion"):
                return visitor.visitExclusion(self)
            else:
                return visitor.visitChildren(self)

    def exclusion(self):

        localctx = ECLsubsetParser.ExclusionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exclusion)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_M or _la == ECLsubsetParser.M):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 148
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_I or _la == ECLsubsetParser.I):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 149
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_N or _la == ECLsubsetParser.N):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 150
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_U or _la == ECLsubsetParser.U):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 151
            _la = self._input.LA(1)
            if not (_la == ECLsubsetParser.CAP_S or _la == ECLsubsetParser.S):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 152
            self.mws()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SctidContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def digitnonzero(self):
            return self.getTypedRuleContext(ECLsubsetParser.DigitnonzeroContext, 0)

        def digit(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.DigitContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.DigitContext, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_sctid

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSctid"):
                return visitor.visitSctid(self)
            else:
                return visitor.visitChildren(self)

    def sctid(self):

        localctx = ECLsubsetParser.SctidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sctid)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.digitnonzero()

            self.state = 155
            self.digit()

            self.state = 156
            self.digit()

            self.state = 157
            self.digit()

            self.state = 158
            self.digit()

            self.state = 159
            self.digit()
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and (
                    (1 << _la)
                    & (
                        (1 << ECLsubsetParser.ZERO)
                        | (1 << ECLsubsetParser.ONE)
                        | (1 << ECLsubsetParser.TWO)
                        | (1 << ECLsubsetParser.THREE)
                        | (1 << ECLsubsetParser.FOUR)
                        | (1 << ECLsubsetParser.FIVE)
                        | (1 << ECLsubsetParser.SIX)
                        | (1 << ECLsubsetParser.SEVEN)
                        | (1 << ECLsubsetParser.EIGHT)
                        | (1 << ECLsubsetParser.NINE)
                    )
                ) != 0:
                    self.state = 160
                    self.digit()

                pass

            elif la_ == 2:
                self.state = 163
                self.digit()

                self.state = 164
                self.digit()
                pass

            elif la_ == 3:
                self.state = 166
                self.digit()

                self.state = 167
                self.digit()

                self.state = 168
                self.digit()
                pass

            elif la_ == 4:
                self.state = 170
                self.digit()

                self.state = 171
                self.digit()

                self.state = 172
                self.digit()

                self.state = 173
                self.digit()
                pass

            elif la_ == 5:
                self.state = 175
                self.digit()

                self.state = 176
                self.digit()

                self.state = 177
                self.digit()

                self.state = 178
                self.digit()

                self.state = 179
                self.digit()
                pass

            elif la_ == 6:
                self.state = 181
                self.digit()

                self.state = 182
                self.digit()

                self.state = 183
                self.digit()

                self.state = 184
                self.digit()

                self.state = 185
                self.digit()

                self.state = 186
                self.digit()
                pass

            elif la_ == 7:
                self.state = 188
                self.digit()

                self.state = 189
                self.digit()

                self.state = 190
                self.digit()

                self.state = 191
                self.digit()

                self.state = 192
                self.digit()

                self.state = 193
                self.digit()

                self.state = 194
                self.digit()
                pass

            elif la_ == 8:
                self.state = 196
                self.digit()

                self.state = 197
                self.digit()

                self.state = 198
                self.digit()

                self.state = 199
                self.digit()

                self.state = 200
                self.digit()

                self.state = 201
                self.digit()

                self.state = 202
                self.digit()

                self.state = 203
                self.digit()
                pass

            elif la_ == 9:
                self.state = 205
                self.digit()

                self.state = 206
                self.digit()

                self.state = 207
                self.digit()

                self.state = 208
                self.digit()

                self.state = 209
                self.digit()

                self.state = 210
                self.digit()

                self.state = 211
                self.digit()

                self.state = 212
                self.digit()

                self.state = 213
                self.digit()
                pass

            elif la_ == 10:
                self.state = 215
                self.digit()

                self.state = 216
                self.digit()

                self.state = 217
                self.digit()

                self.state = 218
                self.digit()

                self.state = 219
                self.digit()

                self.state = 220
                self.digit()

                self.state = 221
                self.digit()

                self.state = 222
                self.digit()

                self.state = 223
                self.digit()

                self.state = 224
                self.digit()
                pass

            elif la_ == 11:
                self.state = 226
                self.digit()

                self.state = 227
                self.digit()

                self.state = 228
                self.digit()

                self.state = 229
                self.digit()

                self.state = 230
                self.digit()

                self.state = 231
                self.digit()

                self.state = 232
                self.digit()

                self.state = 233
                self.digit()

                self.state = 234
                self.digit()

                self.state = 235
                self.digit()

                self.state = 236
                self.digit()
                pass

            elif la_ == 12:
                self.state = 238
                self.digit()

                self.state = 239
                self.digit()

                self.state = 240
                self.digit()

                self.state = 241
                self.digit()

                self.state = 242
                self.digit()

                self.state = 243
                self.digit()

                self.state = 244
                self.digit()

                self.state = 245
                self.digit()

                self.state = 246
                self.digit()

                self.state = 247
                self.digit()

                self.state = 248
                self.digit()

                self.state = 249
                self.digit()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sp(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.SpContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.SpContext, i)

        def htab(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.HtabContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.HtabContext, i)

        def cr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.CrContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.CrContext, i)

        def lf(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.LfContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.LfContext, i)

        def comment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.CommentContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.CommentContext, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_ws

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWs"):
                return visitor.visitWs(self)
            else:
                return visitor.visitChildren(self)

    def ws(self):

        localctx = ECLsubsetParser.WsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ws)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 258
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ECLsubsetParser.SPACE]:
                        self.state = 253
                        self.sp()
                        pass
                    elif token in [ECLsubsetParser.TAB]:
                        self.state = 254
                        self.htab()
                        pass
                    elif token in [ECLsubsetParser.CR]:
                        self.state = 255
                        self.cr()
                        pass
                    elif token in [ECLsubsetParser.LF]:
                        self.state = 256
                        self.lf()
                        pass
                    elif token in [ECLsubsetParser.SLASH]:
                        self.state = 257
                        self.comment()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MwsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sp(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.SpContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.SpContext, i)

        def htab(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.HtabContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.HtabContext, i)

        def cr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.CrContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.CrContext, i)

        def lf(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.LfContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.LfContext, i)

        def comment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.CommentContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.CommentContext, i)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_mws

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMws"):
                return visitor.visitMws(self)
            else:
                return visitor.visitChildren(self)

    def mws(self):

        localctx = ECLsubsetParser.MwsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_mws)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ECLsubsetParser.SPACE]:
                        self.state = 263
                        self.sp()
                        pass
                    elif token in [ECLsubsetParser.TAB]:
                        self.state = 264
                        self.htab()
                        pass
                    elif token in [ECLsubsetParser.CR]:
                        self.state = 265
                        self.cr()
                        pass
                    elif token in [ECLsubsetParser.LF]:
                        self.state = 266
                        self.lf()
                        pass
                    elif token in [ECLsubsetParser.SLASH]:
                        self.state = 267
                        self.comment()
                        pass
                    else:
                        raise NoViableAltException(self)

                else:
                    raise NoViableAltException(self)
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self, i: int = None):
            if i is None:
                return self.getTokens(ECLsubsetParser.SLASH)
            else:
                return self.getToken(ECLsubsetParser.SLASH, i)

        def ASTERISK(self, i: int = None):
            if i is None:
                return self.getTokens(ECLsubsetParser.ASTERISK)
            else:
                return self.getToken(ECLsubsetParser.ASTERISK, i)

        def nonstarchar(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.NonstarcharContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.NonstarcharContext, i)

        def starwithnonfslash(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    ECLsubsetParser.StarwithnonfslashContext
                )
            else:
                return self.getTypedRuleContext(
                    ECLsubsetParser.StarwithnonfslashContext, i
                )

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_comment

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComment"):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)

    def comment(self):

        localctx = ECLsubsetParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(ECLsubsetParser.SLASH)
            self.state = 273
            self.match(ECLsubsetParser.ASTERISK)
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 277
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        ECLsubsetParser.UTF8_LETTER,
                        ECLsubsetParser.TAB,
                        ECLsubsetParser.LF,
                        ECLsubsetParser.CR,
                        ECLsubsetParser.SPACE,
                        ECLsubsetParser.EXCLAMATION,
                        ECLsubsetParser.QUOTE,
                        ECLsubsetParser.POUND,
                        ECLsubsetParser.DOLLAR,
                        ECLsubsetParser.PERCENT,
                        ECLsubsetParser.AMPERSAND,
                        ECLsubsetParser.APOSTROPHE,
                        ECLsubsetParser.LEFT_PAREN,
                        ECLsubsetParser.RIGHT_PAREN,
                        ECLsubsetParser.PLUS,
                        ECLsubsetParser.COMMA,
                        ECLsubsetParser.DASH,
                        ECLsubsetParser.PERIOD,
                        ECLsubsetParser.SLASH,
                        ECLsubsetParser.ZERO,
                        ECLsubsetParser.ONE,
                        ECLsubsetParser.TWO,
                        ECLsubsetParser.THREE,
                        ECLsubsetParser.FOUR,
                        ECLsubsetParser.FIVE,
                        ECLsubsetParser.SIX,
                        ECLsubsetParser.SEVEN,
                        ECLsubsetParser.EIGHT,
                        ECLsubsetParser.NINE,
                        ECLsubsetParser.COLON,
                        ECLsubsetParser.SEMICOLON,
                        ECLsubsetParser.LESS_THAN,
                        ECLsubsetParser.EQUALS,
                        ECLsubsetParser.GREATER_THAN,
                        ECLsubsetParser.QUESTION,
                        ECLsubsetParser.AT,
                        ECLsubsetParser.CAP_A,
                        ECLsubsetParser.CAP_B,
                        ECLsubsetParser.CAP_C,
                        ECLsubsetParser.CAP_D,
                        ECLsubsetParser.CAP_E,
                        ECLsubsetParser.CAP_F,
                        ECLsubsetParser.CAP_G,
                        ECLsubsetParser.CAP_H,
                        ECLsubsetParser.CAP_I,
                        ECLsubsetParser.CAP_J,
                        ECLsubsetParser.CAP_K,
                        ECLsubsetParser.CAP_L,
                        ECLsubsetParser.CAP_M,
                        ECLsubsetParser.CAP_N,
                        ECLsubsetParser.CAP_O,
                        ECLsubsetParser.CAP_P,
                        ECLsubsetParser.CAP_Q,
                        ECLsubsetParser.CAP_R,
                        ECLsubsetParser.CAP_S,
                        ECLsubsetParser.CAP_T,
                        ECLsubsetParser.CAP_U,
                        ECLsubsetParser.CAP_V,
                        ECLsubsetParser.CAP_W,
                        ECLsubsetParser.CAP_X,
                        ECLsubsetParser.CAP_Y,
                        ECLsubsetParser.CAP_Z,
                        ECLsubsetParser.LEFT_BRACE,
                        ECLsubsetParser.BACKSLASH,
                        ECLsubsetParser.RIGHT_BRACE,
                        ECLsubsetParser.CARAT,
                        ECLsubsetParser.UNDERSCORE,
                        ECLsubsetParser.ACCENT,
                        ECLsubsetParser.A,
                        ECLsubsetParser.B,
                        ECLsubsetParser.C,
                        ECLsubsetParser.D,
                        ECLsubsetParser.E,
                        ECLsubsetParser.F,
                        ECLsubsetParser.G,
                        ECLsubsetParser.H,
                        ECLsubsetParser.I,
                        ECLsubsetParser.J,
                        ECLsubsetParser.K,
                        ECLsubsetParser.L,
                        ECLsubsetParser.M,
                        ECLsubsetParser.N,
                        ECLsubsetParser.O,
                        ECLsubsetParser.P,
                        ECLsubsetParser.Q,
                        ECLsubsetParser.R,
                        ECLsubsetParser.S,
                        ECLsubsetParser.T,
                        ECLsubsetParser.U,
                        ECLsubsetParser.V,
                        ECLsubsetParser.W,
                        ECLsubsetParser.X,
                        ECLsubsetParser.Y,
                        ECLsubsetParser.Z,
                        ECLsubsetParser.LEFT_CURLY_BRACE,
                        ECLsubsetParser.PIPE,
                        ECLsubsetParser.RIGHT_CURLY_BRACE,
                        ECLsubsetParser.TILDE,
                    ]:
                        self.state = 275
                        self.nonstarchar()
                        pass
                    elif token in [ECLsubsetParser.ASTERISK]:
                        self.state = 276
                        self.starwithnonfslash()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 13, self._ctx)

            self.state = 282
            self.match(ECLsubsetParser.ASTERISK)
            self.state = 283
            self.match(ECLsubsetParser.SLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonstarcharContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sp(self):
            return self.getTypedRuleContext(ECLsubsetParser.SpContext, 0)

        def htab(self):
            return self.getTypedRuleContext(ECLsubsetParser.HtabContext, 0)

        def cr(self):
            return self.getTypedRuleContext(ECLsubsetParser.CrContext, 0)

        def lf(self):
            return self.getTypedRuleContext(ECLsubsetParser.LfContext, 0)

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def QUOTE(self):
            return self.getToken(ECLsubsetParser.QUOTE, 0)

        def POUND(self):
            return self.getToken(ECLsubsetParser.POUND, 0)

        def DOLLAR(self):
            return self.getToken(ECLsubsetParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(ECLsubsetParser.PERCENT, 0)

        def AMPERSAND(self):
            return self.getToken(ECLsubsetParser.AMPERSAND, 0)

        def APOSTROPHE(self):
            return self.getToken(ECLsubsetParser.APOSTROPHE, 0)

        def LEFT_PAREN(self):
            return self.getToken(ECLsubsetParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(ECLsubsetParser.RIGHT_PAREN, 0)

        def PLUS(self):
            return self.getToken(ECLsubsetParser.PLUS, 0)

        def COMMA(self):
            return self.getToken(ECLsubsetParser.COMMA, 0)

        def DASH(self):
            return self.getToken(ECLsubsetParser.DASH, 0)

        def PERIOD(self):
            return self.getToken(ECLsubsetParser.PERIOD, 0)

        def SLASH(self):
            return self.getToken(ECLsubsetParser.SLASH, 0)

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def COLON(self):
            return self.getToken(ECLsubsetParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(ECLsubsetParser.SEMICOLON, 0)

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def EQUALS(self):
            return self.getToken(ECLsubsetParser.EQUALS, 0)

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def QUESTION(self):
            return self.getToken(ECLsubsetParser.QUESTION, 0)

        def AT(self):
            return self.getToken(ECLsubsetParser.AT, 0)

        def CAP_A(self):
            return self.getToken(ECLsubsetParser.CAP_A, 0)

        def CAP_B(self):
            return self.getToken(ECLsubsetParser.CAP_B, 0)

        def CAP_C(self):
            return self.getToken(ECLsubsetParser.CAP_C, 0)

        def CAP_D(self):
            return self.getToken(ECLsubsetParser.CAP_D, 0)

        def CAP_E(self):
            return self.getToken(ECLsubsetParser.CAP_E, 0)

        def CAP_F(self):
            return self.getToken(ECLsubsetParser.CAP_F, 0)

        def CAP_G(self):
            return self.getToken(ECLsubsetParser.CAP_G, 0)

        def CAP_H(self):
            return self.getToken(ECLsubsetParser.CAP_H, 0)

        def CAP_I(self):
            return self.getToken(ECLsubsetParser.CAP_I, 0)

        def CAP_J(self):
            return self.getToken(ECLsubsetParser.CAP_J, 0)

        def CAP_K(self):
            return self.getToken(ECLsubsetParser.CAP_K, 0)

        def CAP_L(self):
            return self.getToken(ECLsubsetParser.CAP_L, 0)

        def CAP_M(self):
            return self.getToken(ECLsubsetParser.CAP_M, 0)

        def CAP_N(self):
            return self.getToken(ECLsubsetParser.CAP_N, 0)

        def CAP_O(self):
            return self.getToken(ECLsubsetParser.CAP_O, 0)

        def CAP_P(self):
            return self.getToken(ECLsubsetParser.CAP_P, 0)

        def CAP_Q(self):
            return self.getToken(ECLsubsetParser.CAP_Q, 0)

        def CAP_R(self):
            return self.getToken(ECLsubsetParser.CAP_R, 0)

        def CAP_S(self):
            return self.getToken(ECLsubsetParser.CAP_S, 0)

        def CAP_T(self):
            return self.getToken(ECLsubsetParser.CAP_T, 0)

        def CAP_U(self):
            return self.getToken(ECLsubsetParser.CAP_U, 0)

        def CAP_V(self):
            return self.getToken(ECLsubsetParser.CAP_V, 0)

        def CAP_W(self):
            return self.getToken(ECLsubsetParser.CAP_W, 0)

        def CAP_X(self):
            return self.getToken(ECLsubsetParser.CAP_X, 0)

        def CAP_Y(self):
            return self.getToken(ECLsubsetParser.CAP_Y, 0)

        def CAP_Z(self):
            return self.getToken(ECLsubsetParser.CAP_Z, 0)

        def LEFT_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_BRACE, 0)

        def BACKSLASH(self):
            return self.getToken(ECLsubsetParser.BACKSLASH, 0)

        def RIGHT_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_BRACE, 0)

        def CARAT(self):
            return self.getToken(ECLsubsetParser.CARAT, 0)

        def UNDERSCORE(self):
            return self.getToken(ECLsubsetParser.UNDERSCORE, 0)

        def ACCENT(self):
            return self.getToken(ECLsubsetParser.ACCENT, 0)

        def A(self):
            return self.getToken(ECLsubsetParser.A, 0)

        def B(self):
            return self.getToken(ECLsubsetParser.B, 0)

        def C(self):
            return self.getToken(ECLsubsetParser.C, 0)

        def D(self):
            return self.getToken(ECLsubsetParser.D, 0)

        def E(self):
            return self.getToken(ECLsubsetParser.E, 0)

        def F(self):
            return self.getToken(ECLsubsetParser.F, 0)

        def G(self):
            return self.getToken(ECLsubsetParser.G, 0)

        def H(self):
            return self.getToken(ECLsubsetParser.H, 0)

        def I(self):
            return self.getToken(ECLsubsetParser.I, 0)

        def J(self):
            return self.getToken(ECLsubsetParser.J, 0)

        def K(self):
            return self.getToken(ECLsubsetParser.K, 0)

        def L(self):
            return self.getToken(ECLsubsetParser.L, 0)

        def M(self):
            return self.getToken(ECLsubsetParser.M, 0)

        def N(self):
            return self.getToken(ECLsubsetParser.N, 0)

        def O(self):
            return self.getToken(ECLsubsetParser.O, 0)

        def P(self):
            return self.getToken(ECLsubsetParser.P, 0)

        def Q(self):
            return self.getToken(ECLsubsetParser.Q, 0)

        def R(self):
            return self.getToken(ECLsubsetParser.R, 0)

        def S(self):
            return self.getToken(ECLsubsetParser.S, 0)

        def T(self):
            return self.getToken(ECLsubsetParser.T, 0)

        def U(self):
            return self.getToken(ECLsubsetParser.U, 0)

        def V(self):
            return self.getToken(ECLsubsetParser.V, 0)

        def W(self):
            return self.getToken(ECLsubsetParser.W, 0)

        def X(self):
            return self.getToken(ECLsubsetParser.X, 0)

        def Y(self):
            return self.getToken(ECLsubsetParser.Y, 0)

        def Z(self):
            return self.getToken(ECLsubsetParser.Z, 0)

        def LEFT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_CURLY_BRACE, 0)

        def PIPE(self):
            return self.getToken(ECLsubsetParser.PIPE, 0)

        def RIGHT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_CURLY_BRACE, 0)

        def TILDE(self):
            return self.getToken(ECLsubsetParser.TILDE, 0)

        def UTF8_LETTER(self):
            return self.getToken(ECLsubsetParser.UTF8_LETTER, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_nonstarchar

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonstarchar"):
                return visitor.visitNonstarchar(self)
            else:
                return visitor.visitChildren(self)

    def nonstarchar(self):

        localctx = ECLsubsetParser.NonstarcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_nonstarchar)
        self._la = 0  # Token type
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ECLsubsetParser.SPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.sp()
                pass
            elif token in [ECLsubsetParser.TAB]:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.htab()
                pass
            elif token in [ECLsubsetParser.CR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                self.cr()
                pass
            elif token in [ECLsubsetParser.LF]:
                self.enterOuterAlt(localctx, 4)
                self.state = 288
                self.lf()
                pass
            elif token in [
                ECLsubsetParser.EXCLAMATION,
                ECLsubsetParser.QUOTE,
                ECLsubsetParser.POUND,
                ECLsubsetParser.DOLLAR,
                ECLsubsetParser.PERCENT,
                ECLsubsetParser.AMPERSAND,
                ECLsubsetParser.APOSTROPHE,
                ECLsubsetParser.LEFT_PAREN,
                ECLsubsetParser.RIGHT_PAREN,
            ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 289
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << ECLsubsetParser.EXCLAMATION)
                                | (1 << ECLsubsetParser.QUOTE)
                                | (1 << ECLsubsetParser.POUND)
                                | (1 << ECLsubsetParser.DOLLAR)
                                | (1 << ECLsubsetParser.PERCENT)
                                | (1 << ECLsubsetParser.AMPERSAND)
                                | (1 << ECLsubsetParser.APOSTROPHE)
                                | (1 << ECLsubsetParser.LEFT_PAREN)
                                | (1 << ECLsubsetParser.RIGHT_PAREN)
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [
                ECLsubsetParser.PLUS,
                ECLsubsetParser.COMMA,
                ECLsubsetParser.DASH,
                ECLsubsetParser.PERIOD,
                ECLsubsetParser.SLASH,
                ECLsubsetParser.ZERO,
                ECLsubsetParser.ONE,
                ECLsubsetParser.TWO,
                ECLsubsetParser.THREE,
                ECLsubsetParser.FOUR,
                ECLsubsetParser.FIVE,
                ECLsubsetParser.SIX,
                ECLsubsetParser.SEVEN,
                ECLsubsetParser.EIGHT,
                ECLsubsetParser.NINE,
                ECLsubsetParser.COLON,
                ECLsubsetParser.SEMICOLON,
                ECLsubsetParser.LESS_THAN,
                ECLsubsetParser.EQUALS,
                ECLsubsetParser.GREATER_THAN,
                ECLsubsetParser.QUESTION,
                ECLsubsetParser.AT,
                ECLsubsetParser.CAP_A,
                ECLsubsetParser.CAP_B,
                ECLsubsetParser.CAP_C,
                ECLsubsetParser.CAP_D,
                ECLsubsetParser.CAP_E,
                ECLsubsetParser.CAP_F,
                ECLsubsetParser.CAP_G,
                ECLsubsetParser.CAP_H,
                ECLsubsetParser.CAP_I,
                ECLsubsetParser.CAP_J,
                ECLsubsetParser.CAP_K,
                ECLsubsetParser.CAP_L,
                ECLsubsetParser.CAP_M,
                ECLsubsetParser.CAP_N,
                ECLsubsetParser.CAP_O,
                ECLsubsetParser.CAP_P,
                ECLsubsetParser.CAP_Q,
                ECLsubsetParser.CAP_R,
                ECLsubsetParser.CAP_S,
                ECLsubsetParser.CAP_T,
                ECLsubsetParser.CAP_U,
                ECLsubsetParser.CAP_V,
                ECLsubsetParser.CAP_W,
                ECLsubsetParser.CAP_X,
                ECLsubsetParser.CAP_Y,
                ECLsubsetParser.CAP_Z,
                ECLsubsetParser.LEFT_BRACE,
                ECLsubsetParser.BACKSLASH,
                ECLsubsetParser.RIGHT_BRACE,
                ECLsubsetParser.CARAT,
                ECLsubsetParser.UNDERSCORE,
                ECLsubsetParser.ACCENT,
                ECLsubsetParser.A,
                ECLsubsetParser.B,
                ECLsubsetParser.C,
                ECLsubsetParser.D,
                ECLsubsetParser.E,
                ECLsubsetParser.F,
                ECLsubsetParser.G,
                ECLsubsetParser.H,
                ECLsubsetParser.I,
                ECLsubsetParser.J,
                ECLsubsetParser.K,
                ECLsubsetParser.L,
                ECLsubsetParser.M,
                ECLsubsetParser.N,
                ECLsubsetParser.O,
                ECLsubsetParser.P,
                ECLsubsetParser.Q,
                ECLsubsetParser.R,
                ECLsubsetParser.S,
                ECLsubsetParser.T,
                ECLsubsetParser.U,
                ECLsubsetParser.V,
                ECLsubsetParser.W,
                ECLsubsetParser.X,
                ECLsubsetParser.Y,
                ECLsubsetParser.Z,
                ECLsubsetParser.LEFT_CURLY_BRACE,
                ECLsubsetParser.PIPE,
                ECLsubsetParser.RIGHT_CURLY_BRACE,
                ECLsubsetParser.TILDE,
            ]:
                self.enterOuterAlt(localctx, 6)
                self.state = 290
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << ECLsubsetParser.PLUS)
                                | (1 << ECLsubsetParser.COMMA)
                                | (1 << ECLsubsetParser.DASH)
                                | (1 << ECLsubsetParser.PERIOD)
                                | (1 << ECLsubsetParser.SLASH)
                                | (1 << ECLsubsetParser.ZERO)
                                | (1 << ECLsubsetParser.ONE)
                                | (1 << ECLsubsetParser.TWO)
                                | (1 << ECLsubsetParser.THREE)
                                | (1 << ECLsubsetParser.FOUR)
                                | (1 << ECLsubsetParser.FIVE)
                                | (1 << ECLsubsetParser.SIX)
                                | (1 << ECLsubsetParser.SEVEN)
                                | (1 << ECLsubsetParser.EIGHT)
                                | (1 << ECLsubsetParser.NINE)
                                | (1 << ECLsubsetParser.COLON)
                                | (1 << ECLsubsetParser.SEMICOLON)
                                | (1 << ECLsubsetParser.LESS_THAN)
                                | (1 << ECLsubsetParser.EQUALS)
                                | (1 << ECLsubsetParser.GREATER_THAN)
                                | (1 << ECLsubsetParser.QUESTION)
                                | (1 << ECLsubsetParser.AT)
                                | (1 << ECLsubsetParser.CAP_A)
                                | (1 << ECLsubsetParser.CAP_B)
                                | (1 << ECLsubsetParser.CAP_C)
                                | (1 << ECLsubsetParser.CAP_D)
                                | (1 << ECLsubsetParser.CAP_E)
                                | (1 << ECLsubsetParser.CAP_F)
                                | (1 << ECLsubsetParser.CAP_G)
                                | (1 << ECLsubsetParser.CAP_H)
                                | (1 << ECLsubsetParser.CAP_I)
                                | (1 << ECLsubsetParser.CAP_J)
                                | (1 << ECLsubsetParser.CAP_K)
                                | (1 << ECLsubsetParser.CAP_L)
                                | (1 << ECLsubsetParser.CAP_M)
                                | (1 << ECLsubsetParser.CAP_N)
                                | (1 << ECLsubsetParser.CAP_O)
                                | (1 << ECLsubsetParser.CAP_P)
                                | (1 << ECLsubsetParser.CAP_Q)
                                | (1 << ECLsubsetParser.CAP_R)
                                | (1 << ECLsubsetParser.CAP_S)
                                | (1 << ECLsubsetParser.CAP_T)
                                | (1 << ECLsubsetParser.CAP_U)
                                | (1 << ECLsubsetParser.CAP_V)
                                | (1 << ECLsubsetParser.CAP_W)
                                | (1 << ECLsubsetParser.CAP_X)
                                | (1 << ECLsubsetParser.CAP_Y)
                                | (1 << ECLsubsetParser.CAP_Z)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (ECLsubsetParser.LEFT_BRACE - 64))
                                | (1 << (ECLsubsetParser.BACKSLASH - 64))
                                | (1 << (ECLsubsetParser.RIGHT_BRACE - 64))
                                | (1 << (ECLsubsetParser.CARAT - 64))
                                | (1 << (ECLsubsetParser.UNDERSCORE - 64))
                                | (1 << (ECLsubsetParser.ACCENT - 64))
                                | (1 << (ECLsubsetParser.A - 64))
                                | (1 << (ECLsubsetParser.B - 64))
                                | (1 << (ECLsubsetParser.C - 64))
                                | (1 << (ECLsubsetParser.D - 64))
                                | (1 << (ECLsubsetParser.E - 64))
                                | (1 << (ECLsubsetParser.F - 64))
                                | (1 << (ECLsubsetParser.G - 64))
                                | (1 << (ECLsubsetParser.H - 64))
                                | (1 << (ECLsubsetParser.I - 64))
                                | (1 << (ECLsubsetParser.J - 64))
                                | (1 << (ECLsubsetParser.K - 64))
                                | (1 << (ECLsubsetParser.L - 64))
                                | (1 << (ECLsubsetParser.M - 64))
                                | (1 << (ECLsubsetParser.N - 64))
                                | (1 << (ECLsubsetParser.O - 64))
                                | (1 << (ECLsubsetParser.P - 64))
                                | (1 << (ECLsubsetParser.Q - 64))
                                | (1 << (ECLsubsetParser.R - 64))
                                | (1 << (ECLsubsetParser.S - 64))
                                | (1 << (ECLsubsetParser.T - 64))
                                | (1 << (ECLsubsetParser.U - 64))
                                | (1 << (ECLsubsetParser.V - 64))
                                | (1 << (ECLsubsetParser.W - 64))
                                | (1 << (ECLsubsetParser.X - 64))
                                | (1 << (ECLsubsetParser.Y - 64))
                                | (1 << (ECLsubsetParser.Z - 64))
                                | (1 << (ECLsubsetParser.LEFT_CURLY_BRACE - 64))
                                | (1 << (ECLsubsetParser.PIPE - 64))
                                | (1 << (ECLsubsetParser.RIGHT_CURLY_BRACE - 64))
                                | (1 << (ECLsubsetParser.TILDE - 64))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ECLsubsetParser.UTF8_LETTER]:
                self.enterOuterAlt(localctx, 7)
                self.state = 291
                self.match(ECLsubsetParser.UTF8_LETTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StarwithnonfslashContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASTERISK(self):
            return self.getToken(ECLsubsetParser.ASTERISK, 0)

        def nonfslash(self):
            return self.getTypedRuleContext(ECLsubsetParser.NonfslashContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_starwithnonfslash

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStarwithnonfslash"):
                return visitor.visitStarwithnonfslash(self)
            else:
                return visitor.visitChildren(self)

    def starwithnonfslash(self):

        localctx = ECLsubsetParser.StarwithnonfslashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_starwithnonfslash)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(ECLsubsetParser.ASTERISK)
            self.state = 295
            self.nonfslash()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonfslashContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sp(self):
            return self.getTypedRuleContext(ECLsubsetParser.SpContext, 0)

        def htab(self):
            return self.getTypedRuleContext(ECLsubsetParser.HtabContext, 0)

        def cr(self):
            return self.getTypedRuleContext(ECLsubsetParser.CrContext, 0)

        def lf(self):
            return self.getTypedRuleContext(ECLsubsetParser.LfContext, 0)

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def QUOTE(self):
            return self.getToken(ECLsubsetParser.QUOTE, 0)

        def POUND(self):
            return self.getToken(ECLsubsetParser.POUND, 0)

        def DOLLAR(self):
            return self.getToken(ECLsubsetParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(ECLsubsetParser.PERCENT, 0)

        def AMPERSAND(self):
            return self.getToken(ECLsubsetParser.AMPERSAND, 0)

        def APOSTROPHE(self):
            return self.getToken(ECLsubsetParser.APOSTROPHE, 0)

        def LEFT_PAREN(self):
            return self.getToken(ECLsubsetParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(ECLsubsetParser.RIGHT_PAREN, 0)

        def ASTERISK(self):
            return self.getToken(ECLsubsetParser.ASTERISK, 0)

        def PLUS(self):
            return self.getToken(ECLsubsetParser.PLUS, 0)

        def COMMA(self):
            return self.getToken(ECLsubsetParser.COMMA, 0)

        def DASH(self):
            return self.getToken(ECLsubsetParser.DASH, 0)

        def PERIOD(self):
            return self.getToken(ECLsubsetParser.PERIOD, 0)

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def COLON(self):
            return self.getToken(ECLsubsetParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(ECLsubsetParser.SEMICOLON, 0)

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def EQUALS(self):
            return self.getToken(ECLsubsetParser.EQUALS, 0)

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def QUESTION(self):
            return self.getToken(ECLsubsetParser.QUESTION, 0)

        def AT(self):
            return self.getToken(ECLsubsetParser.AT, 0)

        def CAP_A(self):
            return self.getToken(ECLsubsetParser.CAP_A, 0)

        def CAP_B(self):
            return self.getToken(ECLsubsetParser.CAP_B, 0)

        def CAP_C(self):
            return self.getToken(ECLsubsetParser.CAP_C, 0)

        def CAP_D(self):
            return self.getToken(ECLsubsetParser.CAP_D, 0)

        def CAP_E(self):
            return self.getToken(ECLsubsetParser.CAP_E, 0)

        def CAP_F(self):
            return self.getToken(ECLsubsetParser.CAP_F, 0)

        def CAP_G(self):
            return self.getToken(ECLsubsetParser.CAP_G, 0)

        def CAP_H(self):
            return self.getToken(ECLsubsetParser.CAP_H, 0)

        def CAP_I(self):
            return self.getToken(ECLsubsetParser.CAP_I, 0)

        def CAP_J(self):
            return self.getToken(ECLsubsetParser.CAP_J, 0)

        def CAP_K(self):
            return self.getToken(ECLsubsetParser.CAP_K, 0)

        def CAP_L(self):
            return self.getToken(ECLsubsetParser.CAP_L, 0)

        def CAP_M(self):
            return self.getToken(ECLsubsetParser.CAP_M, 0)

        def CAP_N(self):
            return self.getToken(ECLsubsetParser.CAP_N, 0)

        def CAP_O(self):
            return self.getToken(ECLsubsetParser.CAP_O, 0)

        def CAP_P(self):
            return self.getToken(ECLsubsetParser.CAP_P, 0)

        def CAP_Q(self):
            return self.getToken(ECLsubsetParser.CAP_Q, 0)

        def CAP_R(self):
            return self.getToken(ECLsubsetParser.CAP_R, 0)

        def CAP_S(self):
            return self.getToken(ECLsubsetParser.CAP_S, 0)

        def CAP_T(self):
            return self.getToken(ECLsubsetParser.CAP_T, 0)

        def CAP_U(self):
            return self.getToken(ECLsubsetParser.CAP_U, 0)

        def CAP_V(self):
            return self.getToken(ECLsubsetParser.CAP_V, 0)

        def CAP_W(self):
            return self.getToken(ECLsubsetParser.CAP_W, 0)

        def CAP_X(self):
            return self.getToken(ECLsubsetParser.CAP_X, 0)

        def CAP_Y(self):
            return self.getToken(ECLsubsetParser.CAP_Y, 0)

        def CAP_Z(self):
            return self.getToken(ECLsubsetParser.CAP_Z, 0)

        def LEFT_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_BRACE, 0)

        def BACKSLASH(self):
            return self.getToken(ECLsubsetParser.BACKSLASH, 0)

        def RIGHT_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_BRACE, 0)

        def CARAT(self):
            return self.getToken(ECLsubsetParser.CARAT, 0)

        def UNDERSCORE(self):
            return self.getToken(ECLsubsetParser.UNDERSCORE, 0)

        def ACCENT(self):
            return self.getToken(ECLsubsetParser.ACCENT, 0)

        def A(self):
            return self.getToken(ECLsubsetParser.A, 0)

        def B(self):
            return self.getToken(ECLsubsetParser.B, 0)

        def C(self):
            return self.getToken(ECLsubsetParser.C, 0)

        def D(self):
            return self.getToken(ECLsubsetParser.D, 0)

        def E(self):
            return self.getToken(ECLsubsetParser.E, 0)

        def F(self):
            return self.getToken(ECLsubsetParser.F, 0)

        def G(self):
            return self.getToken(ECLsubsetParser.G, 0)

        def H(self):
            return self.getToken(ECLsubsetParser.H, 0)

        def I(self):
            return self.getToken(ECLsubsetParser.I, 0)

        def J(self):
            return self.getToken(ECLsubsetParser.J, 0)

        def K(self):
            return self.getToken(ECLsubsetParser.K, 0)

        def L(self):
            return self.getToken(ECLsubsetParser.L, 0)

        def M(self):
            return self.getToken(ECLsubsetParser.M, 0)

        def N(self):
            return self.getToken(ECLsubsetParser.N, 0)

        def O(self):
            return self.getToken(ECLsubsetParser.O, 0)

        def P(self):
            return self.getToken(ECLsubsetParser.P, 0)

        def Q(self):
            return self.getToken(ECLsubsetParser.Q, 0)

        def R(self):
            return self.getToken(ECLsubsetParser.R, 0)

        def S(self):
            return self.getToken(ECLsubsetParser.S, 0)

        def T(self):
            return self.getToken(ECLsubsetParser.T, 0)

        def U(self):
            return self.getToken(ECLsubsetParser.U, 0)

        def V(self):
            return self.getToken(ECLsubsetParser.V, 0)

        def W(self):
            return self.getToken(ECLsubsetParser.W, 0)

        def X(self):
            return self.getToken(ECLsubsetParser.X, 0)

        def Y(self):
            return self.getToken(ECLsubsetParser.Y, 0)

        def Z(self):
            return self.getToken(ECLsubsetParser.Z, 0)

        def LEFT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_CURLY_BRACE, 0)

        def PIPE(self):
            return self.getToken(ECLsubsetParser.PIPE, 0)

        def RIGHT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_CURLY_BRACE, 0)

        def TILDE(self):
            return self.getToken(ECLsubsetParser.TILDE, 0)

        def UTF8_LETTER(self):
            return self.getToken(ECLsubsetParser.UTF8_LETTER, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_nonfslash

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonfslash"):
                return visitor.visitNonfslash(self)
            else:
                return visitor.visitChildren(self)

    def nonfslash(self):

        localctx = ECLsubsetParser.NonfslashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_nonfslash)
        self._la = 0  # Token type
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ECLsubsetParser.SPACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.sp()
                pass
            elif token in [ECLsubsetParser.TAB]:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.htab()
                pass
            elif token in [ECLsubsetParser.CR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 299
                self.cr()
                pass
            elif token in [ECLsubsetParser.LF]:
                self.enterOuterAlt(localctx, 4)
                self.state = 300
                self.lf()
                pass
            elif token in [
                ECLsubsetParser.EXCLAMATION,
                ECLsubsetParser.QUOTE,
                ECLsubsetParser.POUND,
                ECLsubsetParser.DOLLAR,
                ECLsubsetParser.PERCENT,
                ECLsubsetParser.AMPERSAND,
                ECLsubsetParser.APOSTROPHE,
                ECLsubsetParser.LEFT_PAREN,
                ECLsubsetParser.RIGHT_PAREN,
                ECLsubsetParser.ASTERISK,
                ECLsubsetParser.PLUS,
                ECLsubsetParser.COMMA,
                ECLsubsetParser.DASH,
                ECLsubsetParser.PERIOD,
            ]:
                self.enterOuterAlt(localctx, 5)
                self.state = 301
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << ECLsubsetParser.EXCLAMATION)
                                | (1 << ECLsubsetParser.QUOTE)
                                | (1 << ECLsubsetParser.POUND)
                                | (1 << ECLsubsetParser.DOLLAR)
                                | (1 << ECLsubsetParser.PERCENT)
                                | (1 << ECLsubsetParser.AMPERSAND)
                                | (1 << ECLsubsetParser.APOSTROPHE)
                                | (1 << ECLsubsetParser.LEFT_PAREN)
                                | (1 << ECLsubsetParser.RIGHT_PAREN)
                                | (1 << ECLsubsetParser.ASTERISK)
                                | (1 << ECLsubsetParser.PLUS)
                                | (1 << ECLsubsetParser.COMMA)
                                | (1 << ECLsubsetParser.DASH)
                                | (1 << ECLsubsetParser.PERIOD)
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [
                ECLsubsetParser.ZERO,
                ECLsubsetParser.ONE,
                ECLsubsetParser.TWO,
                ECLsubsetParser.THREE,
                ECLsubsetParser.FOUR,
                ECLsubsetParser.FIVE,
                ECLsubsetParser.SIX,
                ECLsubsetParser.SEVEN,
                ECLsubsetParser.EIGHT,
                ECLsubsetParser.NINE,
                ECLsubsetParser.COLON,
                ECLsubsetParser.SEMICOLON,
                ECLsubsetParser.LESS_THAN,
                ECLsubsetParser.EQUALS,
                ECLsubsetParser.GREATER_THAN,
                ECLsubsetParser.QUESTION,
                ECLsubsetParser.AT,
                ECLsubsetParser.CAP_A,
                ECLsubsetParser.CAP_B,
                ECLsubsetParser.CAP_C,
                ECLsubsetParser.CAP_D,
                ECLsubsetParser.CAP_E,
                ECLsubsetParser.CAP_F,
                ECLsubsetParser.CAP_G,
                ECLsubsetParser.CAP_H,
                ECLsubsetParser.CAP_I,
                ECLsubsetParser.CAP_J,
                ECLsubsetParser.CAP_K,
                ECLsubsetParser.CAP_L,
                ECLsubsetParser.CAP_M,
                ECLsubsetParser.CAP_N,
                ECLsubsetParser.CAP_O,
                ECLsubsetParser.CAP_P,
                ECLsubsetParser.CAP_Q,
                ECLsubsetParser.CAP_R,
                ECLsubsetParser.CAP_S,
                ECLsubsetParser.CAP_T,
                ECLsubsetParser.CAP_U,
                ECLsubsetParser.CAP_V,
                ECLsubsetParser.CAP_W,
                ECLsubsetParser.CAP_X,
                ECLsubsetParser.CAP_Y,
                ECLsubsetParser.CAP_Z,
                ECLsubsetParser.LEFT_BRACE,
                ECLsubsetParser.BACKSLASH,
                ECLsubsetParser.RIGHT_BRACE,
                ECLsubsetParser.CARAT,
                ECLsubsetParser.UNDERSCORE,
                ECLsubsetParser.ACCENT,
                ECLsubsetParser.A,
                ECLsubsetParser.B,
                ECLsubsetParser.C,
                ECLsubsetParser.D,
                ECLsubsetParser.E,
                ECLsubsetParser.F,
                ECLsubsetParser.G,
                ECLsubsetParser.H,
                ECLsubsetParser.I,
                ECLsubsetParser.J,
                ECLsubsetParser.K,
                ECLsubsetParser.L,
                ECLsubsetParser.M,
                ECLsubsetParser.N,
                ECLsubsetParser.O,
                ECLsubsetParser.P,
                ECLsubsetParser.Q,
                ECLsubsetParser.R,
                ECLsubsetParser.S,
                ECLsubsetParser.T,
                ECLsubsetParser.U,
                ECLsubsetParser.V,
                ECLsubsetParser.W,
                ECLsubsetParser.X,
                ECLsubsetParser.Y,
                ECLsubsetParser.Z,
                ECLsubsetParser.LEFT_CURLY_BRACE,
                ECLsubsetParser.PIPE,
                ECLsubsetParser.RIGHT_CURLY_BRACE,
                ECLsubsetParser.TILDE,
            ]:
                self.enterOuterAlt(localctx, 6)
                self.state = 302
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << ECLsubsetParser.ZERO)
                                | (1 << ECLsubsetParser.ONE)
                                | (1 << ECLsubsetParser.TWO)
                                | (1 << ECLsubsetParser.THREE)
                                | (1 << ECLsubsetParser.FOUR)
                                | (1 << ECLsubsetParser.FIVE)
                                | (1 << ECLsubsetParser.SIX)
                                | (1 << ECLsubsetParser.SEVEN)
                                | (1 << ECLsubsetParser.EIGHT)
                                | (1 << ECLsubsetParser.NINE)
                                | (1 << ECLsubsetParser.COLON)
                                | (1 << ECLsubsetParser.SEMICOLON)
                                | (1 << ECLsubsetParser.LESS_THAN)
                                | (1 << ECLsubsetParser.EQUALS)
                                | (1 << ECLsubsetParser.GREATER_THAN)
                                | (1 << ECLsubsetParser.QUESTION)
                                | (1 << ECLsubsetParser.AT)
                                | (1 << ECLsubsetParser.CAP_A)
                                | (1 << ECLsubsetParser.CAP_B)
                                | (1 << ECLsubsetParser.CAP_C)
                                | (1 << ECLsubsetParser.CAP_D)
                                | (1 << ECLsubsetParser.CAP_E)
                                | (1 << ECLsubsetParser.CAP_F)
                                | (1 << ECLsubsetParser.CAP_G)
                                | (1 << ECLsubsetParser.CAP_H)
                                | (1 << ECLsubsetParser.CAP_I)
                                | (1 << ECLsubsetParser.CAP_J)
                                | (1 << ECLsubsetParser.CAP_K)
                                | (1 << ECLsubsetParser.CAP_L)
                                | (1 << ECLsubsetParser.CAP_M)
                                | (1 << ECLsubsetParser.CAP_N)
                                | (1 << ECLsubsetParser.CAP_O)
                                | (1 << ECLsubsetParser.CAP_P)
                                | (1 << ECLsubsetParser.CAP_Q)
                                | (1 << ECLsubsetParser.CAP_R)
                                | (1 << ECLsubsetParser.CAP_S)
                                | (1 << ECLsubsetParser.CAP_T)
                                | (1 << ECLsubsetParser.CAP_U)
                                | (1 << ECLsubsetParser.CAP_V)
                                | (1 << ECLsubsetParser.CAP_W)
                                | (1 << ECLsubsetParser.CAP_X)
                                | (1 << ECLsubsetParser.CAP_Y)
                                | (1 << ECLsubsetParser.CAP_Z)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (ECLsubsetParser.LEFT_BRACE - 64))
                                | (1 << (ECLsubsetParser.BACKSLASH - 64))
                                | (1 << (ECLsubsetParser.RIGHT_BRACE - 64))
                                | (1 << (ECLsubsetParser.CARAT - 64))
                                | (1 << (ECLsubsetParser.UNDERSCORE - 64))
                                | (1 << (ECLsubsetParser.ACCENT - 64))
                                | (1 << (ECLsubsetParser.A - 64))
                                | (1 << (ECLsubsetParser.B - 64))
                                | (1 << (ECLsubsetParser.C - 64))
                                | (1 << (ECLsubsetParser.D - 64))
                                | (1 << (ECLsubsetParser.E - 64))
                                | (1 << (ECLsubsetParser.F - 64))
                                | (1 << (ECLsubsetParser.G - 64))
                                | (1 << (ECLsubsetParser.H - 64))
                                | (1 << (ECLsubsetParser.I - 64))
                                | (1 << (ECLsubsetParser.J - 64))
                                | (1 << (ECLsubsetParser.K - 64))
                                | (1 << (ECLsubsetParser.L - 64))
                                | (1 << (ECLsubsetParser.M - 64))
                                | (1 << (ECLsubsetParser.N - 64))
                                | (1 << (ECLsubsetParser.O - 64))
                                | (1 << (ECLsubsetParser.P - 64))
                                | (1 << (ECLsubsetParser.Q - 64))
                                | (1 << (ECLsubsetParser.R - 64))
                                | (1 << (ECLsubsetParser.S - 64))
                                | (1 << (ECLsubsetParser.T - 64))
                                | (1 << (ECLsubsetParser.U - 64))
                                | (1 << (ECLsubsetParser.V - 64))
                                | (1 << (ECLsubsetParser.W - 64))
                                | (1 << (ECLsubsetParser.X - 64))
                                | (1 << (ECLsubsetParser.Y - 64))
                                | (1 << (ECLsubsetParser.Z - 64))
                                | (1 << (ECLsubsetParser.LEFT_CURLY_BRACE - 64))
                                | (1 << (ECLsubsetParser.PIPE - 64))
                                | (1 << (ECLsubsetParser.RIGHT_CURLY_BRACE - 64))
                                | (1 << (ECLsubsetParser.TILDE - 64))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ECLsubsetParser.UTF8_LETTER]:
                self.enterOuterAlt(localctx, 7)
                self.state = 303
                self.match(ECLsubsetParser.UTF8_LETTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPACE(self):
            return self.getToken(ECLsubsetParser.SPACE, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_sp

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSp"):
                return visitor.visitSp(self)
            else:
                return visitor.visitChildren(self)

    def sp(self):

        localctx = ECLsubsetParser.SpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(ECLsubsetParser.SPACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HtabContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAB(self):
            return self.getToken(ECLsubsetParser.TAB, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_htab

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHtab"):
                return visitor.visitHtab(self)
            else:
                return visitor.visitChildren(self)

    def htab(self):

        localctx = ECLsubsetParser.HtabContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_htab)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(ECLsubsetParser.TAB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CR(self):
            return self.getToken(ECLsubsetParser.CR, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_cr

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCr"):
                return visitor.visitCr(self)
            else:
                return visitor.visitChildren(self)

    def cr(self):

        localctx = ECLsubsetParser.CrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(ECLsubsetParser.CR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LfContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LF(self):
            return self.getToken(ECLsubsetParser.LF, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_lf

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLf"):
                return visitor.visitLf(self)
            else:
                return visitor.visitChildren(self)

    def lf(self):

        localctx = ECLsubsetParser.LfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_lf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(ECLsubsetParser.LF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QmContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE(self):
            return self.getToken(ECLsubsetParser.QUOTE, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_qm

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQm"):
                return visitor.visitQm(self)
            else:
                return visitor.visitChildren(self)

    def qm(self):

        localctx = ECLsubsetParser.QmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_qm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(ECLsubsetParser.QUOTE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKSLASH(self):
            return self.getToken(ECLsubsetParser.BACKSLASH, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_bs

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBs"):
                return visitor.visitBs(self)
            else:
                return visitor.visitChildren(self)

    def bs(self):

        localctx = ECLsubsetParser.BsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_bs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(ECLsubsetParser.BACKSLASH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DigitContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_digit

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDigit"):
                return visitor.visitDigit(self)
            else:
                return visitor.visitChildren(self)

    def digit(self):

        localctx = ECLsubsetParser.DigitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_digit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << ECLsubsetParser.ZERO)
                            | (1 << ECLsubsetParser.ONE)
                            | (1 << ECLsubsetParser.TWO)
                            | (1 << ECLsubsetParser.THREE)
                            | (1 << ECLsubsetParser.FOUR)
                            | (1 << ECLsubsetParser.FIVE)
                            | (1 << ECLsubsetParser.SIX)
                            | (1 << ECLsubsetParser.SEVEN)
                            | (1 << ECLsubsetParser.EIGHT)
                            | (1 << ECLsubsetParser.NINE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ZeroContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_zero

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitZero"):
                return visitor.visitZero(self)
            else:
                return visitor.visitChildren(self)

    def zero(self):

        localctx = ECLsubsetParser.ZeroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_zero)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(ECLsubsetParser.ZERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DigitnonzeroContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_digitnonzero

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDigitnonzero"):
                return visitor.visitDigitnonzero(self)
            else:
                return visitor.visitChildren(self)

    def digitnonzero(self):

        localctx = ECLsubsetParser.DigitnonzeroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_digitnonzero)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << ECLsubsetParser.ONE)
                            | (1 << ECLsubsetParser.TWO)
                            | (1 << ECLsubsetParser.THREE)
                            | (1 << ECLsubsetParser.FOUR)
                            | (1 << ECLsubsetParser.FIVE)
                            | (1 << ECLsubsetParser.SIX)
                            | (1 << ECLsubsetParser.SEVEN)
                            | (1 << ECLsubsetParser.EIGHT)
                            | (1 << ECLsubsetParser.NINE)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonwsnonpipeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def QUOTE(self):
            return self.getToken(ECLsubsetParser.QUOTE, 0)

        def POUND(self):
            return self.getToken(ECLsubsetParser.POUND, 0)

        def DOLLAR(self):
            return self.getToken(ECLsubsetParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(ECLsubsetParser.PERCENT, 0)

        def AMPERSAND(self):
            return self.getToken(ECLsubsetParser.AMPERSAND, 0)

        def APOSTROPHE(self):
            return self.getToken(ECLsubsetParser.APOSTROPHE, 0)

        def LEFT_PAREN(self):
            return self.getToken(ECLsubsetParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(ECLsubsetParser.RIGHT_PAREN, 0)

        def ASTERISK(self):
            return self.getToken(ECLsubsetParser.ASTERISK, 0)

        def PLUS(self):
            return self.getToken(ECLsubsetParser.PLUS, 0)

        def COMMA(self):
            return self.getToken(ECLsubsetParser.COMMA, 0)

        def DASH(self):
            return self.getToken(ECLsubsetParser.DASH, 0)

        def PERIOD(self):
            return self.getToken(ECLsubsetParser.PERIOD, 0)

        def SLASH(self):
            return self.getToken(ECLsubsetParser.SLASH, 0)

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def COLON(self):
            return self.getToken(ECLsubsetParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(ECLsubsetParser.SEMICOLON, 0)

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def EQUALS(self):
            return self.getToken(ECLsubsetParser.EQUALS, 0)

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def QUESTION(self):
            return self.getToken(ECLsubsetParser.QUESTION, 0)

        def AT(self):
            return self.getToken(ECLsubsetParser.AT, 0)

        def CAP_A(self):
            return self.getToken(ECLsubsetParser.CAP_A, 0)

        def CAP_B(self):
            return self.getToken(ECLsubsetParser.CAP_B, 0)

        def CAP_C(self):
            return self.getToken(ECLsubsetParser.CAP_C, 0)

        def CAP_D(self):
            return self.getToken(ECLsubsetParser.CAP_D, 0)

        def CAP_E(self):
            return self.getToken(ECLsubsetParser.CAP_E, 0)

        def CAP_F(self):
            return self.getToken(ECLsubsetParser.CAP_F, 0)

        def CAP_G(self):
            return self.getToken(ECLsubsetParser.CAP_G, 0)

        def CAP_H(self):
            return self.getToken(ECLsubsetParser.CAP_H, 0)

        def CAP_I(self):
            return self.getToken(ECLsubsetParser.CAP_I, 0)

        def CAP_J(self):
            return self.getToken(ECLsubsetParser.CAP_J, 0)

        def CAP_K(self):
            return self.getToken(ECLsubsetParser.CAP_K, 0)

        def CAP_L(self):
            return self.getToken(ECLsubsetParser.CAP_L, 0)

        def CAP_M(self):
            return self.getToken(ECLsubsetParser.CAP_M, 0)

        def CAP_N(self):
            return self.getToken(ECLsubsetParser.CAP_N, 0)

        def CAP_O(self):
            return self.getToken(ECLsubsetParser.CAP_O, 0)

        def CAP_P(self):
            return self.getToken(ECLsubsetParser.CAP_P, 0)

        def CAP_Q(self):
            return self.getToken(ECLsubsetParser.CAP_Q, 0)

        def CAP_R(self):
            return self.getToken(ECLsubsetParser.CAP_R, 0)

        def CAP_S(self):
            return self.getToken(ECLsubsetParser.CAP_S, 0)

        def CAP_T(self):
            return self.getToken(ECLsubsetParser.CAP_T, 0)

        def CAP_U(self):
            return self.getToken(ECLsubsetParser.CAP_U, 0)

        def CAP_V(self):
            return self.getToken(ECLsubsetParser.CAP_V, 0)

        def CAP_W(self):
            return self.getToken(ECLsubsetParser.CAP_W, 0)

        def CAP_X(self):
            return self.getToken(ECLsubsetParser.CAP_X, 0)

        def CAP_Y(self):
            return self.getToken(ECLsubsetParser.CAP_Y, 0)

        def CAP_Z(self):
            return self.getToken(ECLsubsetParser.CAP_Z, 0)

        def LEFT_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_BRACE, 0)

        def BACKSLASH(self):
            return self.getToken(ECLsubsetParser.BACKSLASH, 0)

        def RIGHT_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_BRACE, 0)

        def CARAT(self):
            return self.getToken(ECLsubsetParser.CARAT, 0)

        def UNDERSCORE(self):
            return self.getToken(ECLsubsetParser.UNDERSCORE, 0)

        def ACCENT(self):
            return self.getToken(ECLsubsetParser.ACCENT, 0)

        def A(self):
            return self.getToken(ECLsubsetParser.A, 0)

        def B(self):
            return self.getToken(ECLsubsetParser.B, 0)

        def C(self):
            return self.getToken(ECLsubsetParser.C, 0)

        def D(self):
            return self.getToken(ECLsubsetParser.D, 0)

        def E(self):
            return self.getToken(ECLsubsetParser.E, 0)

        def F(self):
            return self.getToken(ECLsubsetParser.F, 0)

        def G(self):
            return self.getToken(ECLsubsetParser.G, 0)

        def H(self):
            return self.getToken(ECLsubsetParser.H, 0)

        def I(self):
            return self.getToken(ECLsubsetParser.I, 0)

        def J(self):
            return self.getToken(ECLsubsetParser.J, 0)

        def K(self):
            return self.getToken(ECLsubsetParser.K, 0)

        def L(self):
            return self.getToken(ECLsubsetParser.L, 0)

        def M(self):
            return self.getToken(ECLsubsetParser.M, 0)

        def N(self):
            return self.getToken(ECLsubsetParser.N, 0)

        def O(self):
            return self.getToken(ECLsubsetParser.O, 0)

        def P(self):
            return self.getToken(ECLsubsetParser.P, 0)

        def Q(self):
            return self.getToken(ECLsubsetParser.Q, 0)

        def R(self):
            return self.getToken(ECLsubsetParser.R, 0)

        def S(self):
            return self.getToken(ECLsubsetParser.S, 0)

        def T(self):
            return self.getToken(ECLsubsetParser.T, 0)

        def U(self):
            return self.getToken(ECLsubsetParser.U, 0)

        def V(self):
            return self.getToken(ECLsubsetParser.V, 0)

        def W(self):
            return self.getToken(ECLsubsetParser.W, 0)

        def X(self):
            return self.getToken(ECLsubsetParser.X, 0)

        def Y(self):
            return self.getToken(ECLsubsetParser.Y, 0)

        def Z(self):
            return self.getToken(ECLsubsetParser.Z, 0)

        def LEFT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_CURLY_BRACE, 0)

        def RIGHT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_CURLY_BRACE, 0)

        def TILDE(self):
            return self.getToken(ECLsubsetParser.TILDE, 0)

        def UTF8_LETTER(self):
            return self.getToken(ECLsubsetParser.UTF8_LETTER, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_nonwsnonpipe

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonwsnonpipe"):
                return visitor.visitNonwsnonpipe(self)
            else:
                return visitor.visitChildren(self)

    def nonwsnonpipe(self):

        localctx = ECLsubsetParser.NonwsnonpipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_nonwsnonpipe)
        self._la = 0  # Token type
        try:
            self.state = 327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                ECLsubsetParser.EXCLAMATION,
                ECLsubsetParser.QUOTE,
                ECLsubsetParser.POUND,
                ECLsubsetParser.DOLLAR,
                ECLsubsetParser.PERCENT,
                ECLsubsetParser.AMPERSAND,
                ECLsubsetParser.APOSTROPHE,
                ECLsubsetParser.LEFT_PAREN,
                ECLsubsetParser.RIGHT_PAREN,
                ECLsubsetParser.ASTERISK,
                ECLsubsetParser.PLUS,
                ECLsubsetParser.COMMA,
                ECLsubsetParser.DASH,
                ECLsubsetParser.PERIOD,
                ECLsubsetParser.SLASH,
                ECLsubsetParser.ZERO,
                ECLsubsetParser.ONE,
                ECLsubsetParser.TWO,
                ECLsubsetParser.THREE,
                ECLsubsetParser.FOUR,
                ECLsubsetParser.FIVE,
                ECLsubsetParser.SIX,
                ECLsubsetParser.SEVEN,
                ECLsubsetParser.EIGHT,
                ECLsubsetParser.NINE,
                ECLsubsetParser.COLON,
                ECLsubsetParser.SEMICOLON,
                ECLsubsetParser.LESS_THAN,
                ECLsubsetParser.EQUALS,
                ECLsubsetParser.GREATER_THAN,
                ECLsubsetParser.QUESTION,
                ECLsubsetParser.AT,
                ECLsubsetParser.CAP_A,
                ECLsubsetParser.CAP_B,
                ECLsubsetParser.CAP_C,
                ECLsubsetParser.CAP_D,
                ECLsubsetParser.CAP_E,
                ECLsubsetParser.CAP_F,
                ECLsubsetParser.CAP_G,
                ECLsubsetParser.CAP_H,
                ECLsubsetParser.CAP_I,
                ECLsubsetParser.CAP_J,
                ECLsubsetParser.CAP_K,
                ECLsubsetParser.CAP_L,
                ECLsubsetParser.CAP_M,
                ECLsubsetParser.CAP_N,
                ECLsubsetParser.CAP_O,
                ECLsubsetParser.CAP_P,
                ECLsubsetParser.CAP_Q,
                ECLsubsetParser.CAP_R,
                ECLsubsetParser.CAP_S,
                ECLsubsetParser.CAP_T,
                ECLsubsetParser.CAP_U,
                ECLsubsetParser.CAP_V,
                ECLsubsetParser.CAP_W,
                ECLsubsetParser.CAP_X,
                ECLsubsetParser.CAP_Y,
                ECLsubsetParser.CAP_Z,
                ECLsubsetParser.LEFT_BRACE,
                ECLsubsetParser.BACKSLASH,
                ECLsubsetParser.RIGHT_BRACE,
                ECLsubsetParser.CARAT,
                ECLsubsetParser.UNDERSCORE,
                ECLsubsetParser.ACCENT,
                ECLsubsetParser.A,
                ECLsubsetParser.B,
                ECLsubsetParser.C,
                ECLsubsetParser.D,
                ECLsubsetParser.E,
                ECLsubsetParser.F,
                ECLsubsetParser.G,
                ECLsubsetParser.H,
                ECLsubsetParser.I,
                ECLsubsetParser.J,
                ECLsubsetParser.K,
                ECLsubsetParser.L,
                ECLsubsetParser.M,
                ECLsubsetParser.N,
                ECLsubsetParser.O,
                ECLsubsetParser.P,
                ECLsubsetParser.Q,
                ECLsubsetParser.R,
                ECLsubsetParser.S,
                ECLsubsetParser.T,
                ECLsubsetParser.U,
                ECLsubsetParser.V,
                ECLsubsetParser.W,
                ECLsubsetParser.X,
                ECLsubsetParser.Y,
                ECLsubsetParser.Z,
                ECLsubsetParser.LEFT_CURLY_BRACE,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                _la = self._input.LA(1)
                if not (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << ECLsubsetParser.EXCLAMATION)
                                | (1 << ECLsubsetParser.QUOTE)
                                | (1 << ECLsubsetParser.POUND)
                                | (1 << ECLsubsetParser.DOLLAR)
                                | (1 << ECLsubsetParser.PERCENT)
                                | (1 << ECLsubsetParser.AMPERSAND)
                                | (1 << ECLsubsetParser.APOSTROPHE)
                                | (1 << ECLsubsetParser.LEFT_PAREN)
                                | (1 << ECLsubsetParser.RIGHT_PAREN)
                                | (1 << ECLsubsetParser.ASTERISK)
                                | (1 << ECLsubsetParser.PLUS)
                                | (1 << ECLsubsetParser.COMMA)
                                | (1 << ECLsubsetParser.DASH)
                                | (1 << ECLsubsetParser.PERIOD)
                                | (1 << ECLsubsetParser.SLASH)
                                | (1 << ECLsubsetParser.ZERO)
                                | (1 << ECLsubsetParser.ONE)
                                | (1 << ECLsubsetParser.TWO)
                                | (1 << ECLsubsetParser.THREE)
                                | (1 << ECLsubsetParser.FOUR)
                                | (1 << ECLsubsetParser.FIVE)
                                | (1 << ECLsubsetParser.SIX)
                                | (1 << ECLsubsetParser.SEVEN)
                                | (1 << ECLsubsetParser.EIGHT)
                                | (1 << ECLsubsetParser.NINE)
                                | (1 << ECLsubsetParser.COLON)
                                | (1 << ECLsubsetParser.SEMICOLON)
                                | (1 << ECLsubsetParser.LESS_THAN)
                                | (1 << ECLsubsetParser.EQUALS)
                                | (1 << ECLsubsetParser.GREATER_THAN)
                                | (1 << ECLsubsetParser.QUESTION)
                                | (1 << ECLsubsetParser.AT)
                                | (1 << ECLsubsetParser.CAP_A)
                                | (1 << ECLsubsetParser.CAP_B)
                                | (1 << ECLsubsetParser.CAP_C)
                                | (1 << ECLsubsetParser.CAP_D)
                                | (1 << ECLsubsetParser.CAP_E)
                                | (1 << ECLsubsetParser.CAP_F)
                                | (1 << ECLsubsetParser.CAP_G)
                                | (1 << ECLsubsetParser.CAP_H)
                                | (1 << ECLsubsetParser.CAP_I)
                                | (1 << ECLsubsetParser.CAP_J)
                                | (1 << ECLsubsetParser.CAP_K)
                                | (1 << ECLsubsetParser.CAP_L)
                                | (1 << ECLsubsetParser.CAP_M)
                                | (1 << ECLsubsetParser.CAP_N)
                                | (1 << ECLsubsetParser.CAP_O)
                                | (1 << ECLsubsetParser.CAP_P)
                                | (1 << ECLsubsetParser.CAP_Q)
                                | (1 << ECLsubsetParser.CAP_R)
                                | (1 << ECLsubsetParser.CAP_S)
                                | (1 << ECLsubsetParser.CAP_T)
                                | (1 << ECLsubsetParser.CAP_U)
                                | (1 << ECLsubsetParser.CAP_V)
                                | (1 << ECLsubsetParser.CAP_W)
                                | (1 << ECLsubsetParser.CAP_X)
                                | (1 << ECLsubsetParser.CAP_Y)
                                | (1 << ECLsubsetParser.CAP_Z)
                            )
                        )
                        != 0
                    )
                    or (
                        (((_la - 64)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 64))
                            & (
                                (1 << (ECLsubsetParser.LEFT_BRACE - 64))
                                | (1 << (ECLsubsetParser.BACKSLASH - 64))
                                | (1 << (ECLsubsetParser.RIGHT_BRACE - 64))
                                | (1 << (ECLsubsetParser.CARAT - 64))
                                | (1 << (ECLsubsetParser.UNDERSCORE - 64))
                                | (1 << (ECLsubsetParser.ACCENT - 64))
                                | (1 << (ECLsubsetParser.A - 64))
                                | (1 << (ECLsubsetParser.B - 64))
                                | (1 << (ECLsubsetParser.C - 64))
                                | (1 << (ECLsubsetParser.D - 64))
                                | (1 << (ECLsubsetParser.E - 64))
                                | (1 << (ECLsubsetParser.F - 64))
                                | (1 << (ECLsubsetParser.G - 64))
                                | (1 << (ECLsubsetParser.H - 64))
                                | (1 << (ECLsubsetParser.I - 64))
                                | (1 << (ECLsubsetParser.J - 64))
                                | (1 << (ECLsubsetParser.K - 64))
                                | (1 << (ECLsubsetParser.L - 64))
                                | (1 << (ECLsubsetParser.M - 64))
                                | (1 << (ECLsubsetParser.N - 64))
                                | (1 << (ECLsubsetParser.O - 64))
                                | (1 << (ECLsubsetParser.P - 64))
                                | (1 << (ECLsubsetParser.Q - 64))
                                | (1 << (ECLsubsetParser.R - 64))
                                | (1 << (ECLsubsetParser.S - 64))
                                | (1 << (ECLsubsetParser.T - 64))
                                | (1 << (ECLsubsetParser.U - 64))
                                | (1 << (ECLsubsetParser.V - 64))
                                | (1 << (ECLsubsetParser.W - 64))
                                | (1 << (ECLsubsetParser.X - 64))
                                | (1 << (ECLsubsetParser.Y - 64))
                                | (1 << (ECLsubsetParser.Z - 64))
                                | (1 << (ECLsubsetParser.LEFT_CURLY_BRACE - 64))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ECLsubsetParser.RIGHT_CURLY_BRACE, ECLsubsetParser.TILDE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                _la = self._input.LA(1)
                if not (
                    _la == ECLsubsetParser.RIGHT_CURLY_BRACE
                    or _la == ECLsubsetParser.TILDE
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [ECLsubsetParser.UTF8_LETTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.match(ECLsubsetParser.UTF8_LETTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnynonescapedcharContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sp(self):
            return self.getTypedRuleContext(ECLsubsetParser.SpContext, 0)

        def htab(self):
            return self.getTypedRuleContext(ECLsubsetParser.HtabContext, 0)

        def cr(self):
            return self.getTypedRuleContext(ECLsubsetParser.CrContext, 0)

        def lf(self):
            return self.getTypedRuleContext(ECLsubsetParser.LfContext, 0)

        def SPACE(self):
            return self.getToken(ECLsubsetParser.SPACE, 0)

        def EXCLAMATION(self):
            return self.getToken(ECLsubsetParser.EXCLAMATION, 0)

        def POUND(self):
            return self.getToken(ECLsubsetParser.POUND, 0)

        def DOLLAR(self):
            return self.getToken(ECLsubsetParser.DOLLAR, 0)

        def PERCENT(self):
            return self.getToken(ECLsubsetParser.PERCENT, 0)

        def AMPERSAND(self):
            return self.getToken(ECLsubsetParser.AMPERSAND, 0)

        def APOSTROPHE(self):
            return self.getToken(ECLsubsetParser.APOSTROPHE, 0)

        def LEFT_PAREN(self):
            return self.getToken(ECLsubsetParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(ECLsubsetParser.RIGHT_PAREN, 0)

        def ASTERISK(self):
            return self.getToken(ECLsubsetParser.ASTERISK, 0)

        def PLUS(self):
            return self.getToken(ECLsubsetParser.PLUS, 0)

        def COMMA(self):
            return self.getToken(ECLsubsetParser.COMMA, 0)

        def DASH(self):
            return self.getToken(ECLsubsetParser.DASH, 0)

        def PERIOD(self):
            return self.getToken(ECLsubsetParser.PERIOD, 0)

        def SLASH(self):
            return self.getToken(ECLsubsetParser.SLASH, 0)

        def ZERO(self):
            return self.getToken(ECLsubsetParser.ZERO, 0)

        def ONE(self):
            return self.getToken(ECLsubsetParser.ONE, 0)

        def TWO(self):
            return self.getToken(ECLsubsetParser.TWO, 0)

        def THREE(self):
            return self.getToken(ECLsubsetParser.THREE, 0)

        def FOUR(self):
            return self.getToken(ECLsubsetParser.FOUR, 0)

        def FIVE(self):
            return self.getToken(ECLsubsetParser.FIVE, 0)

        def SIX(self):
            return self.getToken(ECLsubsetParser.SIX, 0)

        def SEVEN(self):
            return self.getToken(ECLsubsetParser.SEVEN, 0)

        def EIGHT(self):
            return self.getToken(ECLsubsetParser.EIGHT, 0)

        def NINE(self):
            return self.getToken(ECLsubsetParser.NINE, 0)

        def COLON(self):
            return self.getToken(ECLsubsetParser.COLON, 0)

        def SEMICOLON(self):
            return self.getToken(ECLsubsetParser.SEMICOLON, 0)

        def LESS_THAN(self):
            return self.getToken(ECLsubsetParser.LESS_THAN, 0)

        def EQUALS(self):
            return self.getToken(ECLsubsetParser.EQUALS, 0)

        def GREATER_THAN(self):
            return self.getToken(ECLsubsetParser.GREATER_THAN, 0)

        def QUESTION(self):
            return self.getToken(ECLsubsetParser.QUESTION, 0)

        def AT(self):
            return self.getToken(ECLsubsetParser.AT, 0)

        def CAP_A(self):
            return self.getToken(ECLsubsetParser.CAP_A, 0)

        def CAP_B(self):
            return self.getToken(ECLsubsetParser.CAP_B, 0)

        def CAP_C(self):
            return self.getToken(ECLsubsetParser.CAP_C, 0)

        def CAP_D(self):
            return self.getToken(ECLsubsetParser.CAP_D, 0)

        def CAP_E(self):
            return self.getToken(ECLsubsetParser.CAP_E, 0)

        def CAP_F(self):
            return self.getToken(ECLsubsetParser.CAP_F, 0)

        def CAP_G(self):
            return self.getToken(ECLsubsetParser.CAP_G, 0)

        def CAP_H(self):
            return self.getToken(ECLsubsetParser.CAP_H, 0)

        def CAP_I(self):
            return self.getToken(ECLsubsetParser.CAP_I, 0)

        def CAP_J(self):
            return self.getToken(ECLsubsetParser.CAP_J, 0)

        def CAP_K(self):
            return self.getToken(ECLsubsetParser.CAP_K, 0)

        def CAP_L(self):
            return self.getToken(ECLsubsetParser.CAP_L, 0)

        def CAP_M(self):
            return self.getToken(ECLsubsetParser.CAP_M, 0)

        def CAP_N(self):
            return self.getToken(ECLsubsetParser.CAP_N, 0)

        def CAP_O(self):
            return self.getToken(ECLsubsetParser.CAP_O, 0)

        def CAP_P(self):
            return self.getToken(ECLsubsetParser.CAP_P, 0)

        def CAP_Q(self):
            return self.getToken(ECLsubsetParser.CAP_Q, 0)

        def CAP_R(self):
            return self.getToken(ECLsubsetParser.CAP_R, 0)

        def CAP_S(self):
            return self.getToken(ECLsubsetParser.CAP_S, 0)

        def CAP_T(self):
            return self.getToken(ECLsubsetParser.CAP_T, 0)

        def CAP_U(self):
            return self.getToken(ECLsubsetParser.CAP_U, 0)

        def CAP_V(self):
            return self.getToken(ECLsubsetParser.CAP_V, 0)

        def CAP_W(self):
            return self.getToken(ECLsubsetParser.CAP_W, 0)

        def CAP_X(self):
            return self.getToken(ECLsubsetParser.CAP_X, 0)

        def CAP_Y(self):
            return self.getToken(ECLsubsetParser.CAP_Y, 0)

        def CAP_Z(self):
            return self.getToken(ECLsubsetParser.CAP_Z, 0)

        def LEFT_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_BRACE, 0)

        def CARAT(self):
            return self.getToken(ECLsubsetParser.CARAT, 0)

        def UNDERSCORE(self):
            return self.getToken(ECLsubsetParser.UNDERSCORE, 0)

        def ACCENT(self):
            return self.getToken(ECLsubsetParser.ACCENT, 0)

        def A(self):
            return self.getToken(ECLsubsetParser.A, 0)

        def B(self):
            return self.getToken(ECLsubsetParser.B, 0)

        def C(self):
            return self.getToken(ECLsubsetParser.C, 0)

        def D(self):
            return self.getToken(ECLsubsetParser.D, 0)

        def E(self):
            return self.getToken(ECLsubsetParser.E, 0)

        def F(self):
            return self.getToken(ECLsubsetParser.F, 0)

        def G(self):
            return self.getToken(ECLsubsetParser.G, 0)

        def H(self):
            return self.getToken(ECLsubsetParser.H, 0)

        def I(self):
            return self.getToken(ECLsubsetParser.I, 0)

        def J(self):
            return self.getToken(ECLsubsetParser.J, 0)

        def K(self):
            return self.getToken(ECLsubsetParser.K, 0)

        def L(self):
            return self.getToken(ECLsubsetParser.L, 0)

        def M(self):
            return self.getToken(ECLsubsetParser.M, 0)

        def N(self):
            return self.getToken(ECLsubsetParser.N, 0)

        def O(self):
            return self.getToken(ECLsubsetParser.O, 0)

        def P(self):
            return self.getToken(ECLsubsetParser.P, 0)

        def Q(self):
            return self.getToken(ECLsubsetParser.Q, 0)

        def R(self):
            return self.getToken(ECLsubsetParser.R, 0)

        def S(self):
            return self.getToken(ECLsubsetParser.S, 0)

        def T(self):
            return self.getToken(ECLsubsetParser.T, 0)

        def U(self):
            return self.getToken(ECLsubsetParser.U, 0)

        def V(self):
            return self.getToken(ECLsubsetParser.V, 0)

        def W(self):
            return self.getToken(ECLsubsetParser.W, 0)

        def X(self):
            return self.getToken(ECLsubsetParser.X, 0)

        def Y(self):
            return self.getToken(ECLsubsetParser.Y, 0)

        def Z(self):
            return self.getToken(ECLsubsetParser.Z, 0)

        def LEFT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.LEFT_CURLY_BRACE, 0)

        def PIPE(self):
            return self.getToken(ECLsubsetParser.PIPE, 0)

        def RIGHT_CURLY_BRACE(self):
            return self.getToken(ECLsubsetParser.RIGHT_CURLY_BRACE, 0)

        def TILDE(self):
            return self.getToken(ECLsubsetParser.TILDE, 0)

        def UTF8_LETTER(self):
            return self.getToken(ECLsubsetParser.UTF8_LETTER, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_anynonescapedchar

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAnynonescapedchar"):
                return visitor.visitAnynonescapedchar(self)
            else:
                return visitor.visitChildren(self)

    def anynonescapedchar(self):

        localctx = ECLsubsetParser.AnynonescapedcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_anynonescapedchar)
        self._la = 0  # Token type
        try:
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.sp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 330
                self.htab()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 331
                self.cr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 332
                self.lf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 333
                _la = self._input.LA(1)
                if not (
                    _la == ECLsubsetParser.SPACE or _la == ECLsubsetParser.EXCLAMATION
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 334
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 8)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 8))
                            & (
                                (1 << (ECLsubsetParser.POUND - 8))
                                | (1 << (ECLsubsetParser.DOLLAR - 8))
                                | (1 << (ECLsubsetParser.PERCENT - 8))
                                | (1 << (ECLsubsetParser.AMPERSAND - 8))
                                | (1 << (ECLsubsetParser.APOSTROPHE - 8))
                                | (1 << (ECLsubsetParser.LEFT_PAREN - 8))
                                | (1 << (ECLsubsetParser.RIGHT_PAREN - 8))
                                | (1 << (ECLsubsetParser.ASTERISK - 8))
                                | (1 << (ECLsubsetParser.PLUS - 8))
                                | (1 << (ECLsubsetParser.COMMA - 8))
                                | (1 << (ECLsubsetParser.DASH - 8))
                                | (1 << (ECLsubsetParser.PERIOD - 8))
                                | (1 << (ECLsubsetParser.SLASH - 8))
                                | (1 << (ECLsubsetParser.ZERO - 8))
                                | (1 << (ECLsubsetParser.ONE - 8))
                                | (1 << (ECLsubsetParser.TWO - 8))
                                | (1 << (ECLsubsetParser.THREE - 8))
                                | (1 << (ECLsubsetParser.FOUR - 8))
                                | (1 << (ECLsubsetParser.FIVE - 8))
                                | (1 << (ECLsubsetParser.SIX - 8))
                                | (1 << (ECLsubsetParser.SEVEN - 8))
                                | (1 << (ECLsubsetParser.EIGHT - 8))
                                | (1 << (ECLsubsetParser.NINE - 8))
                                | (1 << (ECLsubsetParser.COLON - 8))
                                | (1 << (ECLsubsetParser.SEMICOLON - 8))
                                | (1 << (ECLsubsetParser.LESS_THAN - 8))
                                | (1 << (ECLsubsetParser.EQUALS - 8))
                                | (1 << (ECLsubsetParser.GREATER_THAN - 8))
                                | (1 << (ECLsubsetParser.QUESTION - 8))
                                | (1 << (ECLsubsetParser.AT - 8))
                                | (1 << (ECLsubsetParser.CAP_A - 8))
                                | (1 << (ECLsubsetParser.CAP_B - 8))
                                | (1 << (ECLsubsetParser.CAP_C - 8))
                                | (1 << (ECLsubsetParser.CAP_D - 8))
                                | (1 << (ECLsubsetParser.CAP_E - 8))
                                | (1 << (ECLsubsetParser.CAP_F - 8))
                                | (1 << (ECLsubsetParser.CAP_G - 8))
                                | (1 << (ECLsubsetParser.CAP_H - 8))
                                | (1 << (ECLsubsetParser.CAP_I - 8))
                                | (1 << (ECLsubsetParser.CAP_J - 8))
                                | (1 << (ECLsubsetParser.CAP_K - 8))
                                | (1 << (ECLsubsetParser.CAP_L - 8))
                                | (1 << (ECLsubsetParser.CAP_M - 8))
                                | (1 << (ECLsubsetParser.CAP_N - 8))
                                | (1 << (ECLsubsetParser.CAP_O - 8))
                                | (1 << (ECLsubsetParser.CAP_P - 8))
                                | (1 << (ECLsubsetParser.CAP_Q - 8))
                                | (1 << (ECLsubsetParser.CAP_R - 8))
                                | (1 << (ECLsubsetParser.CAP_S - 8))
                                | (1 << (ECLsubsetParser.CAP_T - 8))
                                | (1 << (ECLsubsetParser.CAP_U - 8))
                                | (1 << (ECLsubsetParser.CAP_V - 8))
                                | (1 << (ECLsubsetParser.CAP_W - 8))
                                | (1 << (ECLsubsetParser.CAP_X - 8))
                                | (1 << (ECLsubsetParser.CAP_Y - 8))
                                | (1 << (ECLsubsetParser.CAP_Z - 8))
                                | (1 << (ECLsubsetParser.LEFT_BRACE - 8))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 335
                _la = self._input.LA(1)
                if not (
                    (
                        (((_la - 66)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 66))
                            & (
                                (1 << (ECLsubsetParser.RIGHT_BRACE - 66))
                                | (1 << (ECLsubsetParser.CARAT - 66))
                                | (1 << (ECLsubsetParser.UNDERSCORE - 66))
                                | (1 << (ECLsubsetParser.ACCENT - 66))
                                | (1 << (ECLsubsetParser.A - 66))
                                | (1 << (ECLsubsetParser.B - 66))
                                | (1 << (ECLsubsetParser.C - 66))
                                | (1 << (ECLsubsetParser.D - 66))
                                | (1 << (ECLsubsetParser.E - 66))
                                | (1 << (ECLsubsetParser.F - 66))
                                | (1 << (ECLsubsetParser.G - 66))
                                | (1 << (ECLsubsetParser.H - 66))
                                | (1 << (ECLsubsetParser.I - 66))
                                | (1 << (ECLsubsetParser.J - 66))
                                | (1 << (ECLsubsetParser.K - 66))
                                | (1 << (ECLsubsetParser.L - 66))
                                | (1 << (ECLsubsetParser.M - 66))
                                | (1 << (ECLsubsetParser.N - 66))
                                | (1 << (ECLsubsetParser.O - 66))
                                | (1 << (ECLsubsetParser.P - 66))
                                | (1 << (ECLsubsetParser.Q - 66))
                                | (1 << (ECLsubsetParser.R - 66))
                                | (1 << (ECLsubsetParser.S - 66))
                                | (1 << (ECLsubsetParser.T - 66))
                                | (1 << (ECLsubsetParser.U - 66))
                                | (1 << (ECLsubsetParser.V - 66))
                                | (1 << (ECLsubsetParser.W - 66))
                                | (1 << (ECLsubsetParser.X - 66))
                                | (1 << (ECLsubsetParser.Y - 66))
                                | (1 << (ECLsubsetParser.Z - 66))
                                | (1 << (ECLsubsetParser.LEFT_CURLY_BRACE - 66))
                                | (1 << (ECLsubsetParser.PIPE - 66))
                                | (1 << (ECLsubsetParser.RIGHT_CURLY_BRACE - 66))
                                | (1 << (ECLsubsetParser.TILDE - 66))
                            )
                        )
                        != 0
                    )
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 336
                self.match(ECLsubsetParser.UTF8_LETTER)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EscapedcharContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bs(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(ECLsubsetParser.BsContext)
            else:
                return self.getTypedRuleContext(ECLsubsetParser.BsContext, i)

        def qm(self):
            return self.getTypedRuleContext(ECLsubsetParser.QmContext, 0)

        def getRuleIndex(self):
            return ECLsubsetParser.RULE_escapedchar

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEscapedchar"):
                return visitor.visitEscapedchar(self)
            else:
                return visitor.visitChildren(self)

    def escapedchar(self):

        localctx = ECLsubsetParser.EscapedcharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_escapedchar)
        try:
            self.state = 345
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 18, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.bs()
                self.state = 340
                self.qm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.bs()
                self.state = 343
                self.bs()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
